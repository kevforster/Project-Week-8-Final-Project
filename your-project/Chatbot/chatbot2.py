{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import numpy as np\n",
    "from sklearn import datasets\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import math\n",
    "from sqlalchemy import create_engine\n",
    "import os\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": "Using TensorFlow backend.\n"
    }
   ],
   "source": [
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Activation, Dropout\n",
    "from keras.optimizers import SGD\n",
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import nltk\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "lemmatizer = WordNetLemmatizer()\n",
    "import json\n",
    "import pickle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "words=[]\n",
    "classes = []\n",
    "documents = []\n",
    "ignore_words = ['?', '!']\n",
    "data_file = open('intents.json').read()\n",
    "intents = json.loads(data_file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_recommendations=pd.read_csv('../csv/DF_Recommendations.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Customer_ID</th>\n      <th>Customer_Name</th>\n      <th>Market</th>\n      <th>Recommendation1</th>\n      <th>Recommendation2</th>\n      <th>Recommendation3</th>\n      <th>Recommendation4</th>\n      <th>Recommendation5</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>AA-10315</td>\n      <td>Alex Avila</td>\n      <td>APAC</td>\n      <td>Eldon Lockers, Blue</td>\n      <td>Kleencut Trimmer, Steel</td>\n      <td>Eldon Shelving, Blue</td>\n      <td>SanDisk Mouse, Programmable</td>\n      <td>Harbour Creations Swivel Stool, Red</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>AA-10315</td>\n      <td>Alex Avila</td>\n      <td>EU</td>\n      <td>Canon Personal Copier, High-Speed</td>\n      <td>Motorola Audio Dock, VoIP</td>\n      <td>Sanford Sketch Pad, Fluorescent</td>\n      <td>Eldon File Cart, Single Width</td>\n      <td>Binney &amp; Smith Canvas, Easy-Erase</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>AA-10315</td>\n      <td>Alex Avila</td>\n      <td>LATAM</td>\n      <td>Stockwell Paper Clips, Bulk Pack</td>\n      <td>Smead Lockers, Industrial</td>\n      <td>Hoover Blender, White</td>\n      <td>Ibico Index Tab, Clear</td>\n      <td>Belkin Memory Card, Erganomic</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>AA-10315</td>\n      <td>Alex Avila</td>\n      <td>US</td>\n      <td>Acco PRESSTEX Data Binder with Storage Hooks, ...</td>\n      <td>Square Credit Card Reader, 4 1/2\" x 4 1/2\" x 1...</td>\n      <td>Fellowes PB200 Plastic Comb Binding Machine</td>\n      <td>Mitel MiVoice 5330e IP Phone</td>\n      <td>Mophie Juice Pack Helium for iPhone</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>AA-10375</td>\n      <td>Allen Armold</td>\n      <td>APAC</td>\n      <td>SAFCO Steel Folding Chair, Red</td>\n      <td>Eldon Lockers, Blue</td>\n      <td>Tenex Box, Industrial</td>\n      <td>Green Bar Note Cards, Premium</td>\n      <td>SanDisk Memory Card, USB</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
      "text/plain": "  Customer_ID Customer_Name Market  \\\n0    AA-10315    Alex Avila   APAC   \n1    AA-10315    Alex Avila     EU   \n2    AA-10315    Alex Avila  LATAM   \n3    AA-10315    Alex Avila     US   \n4    AA-10375  Allen Armold   APAC   \n\n                                     Recommendation1  \\\n0                                Eldon Lockers, Blue   \n1                  Canon Personal Copier, High-Speed   \n2                   Stockwell Paper Clips, Bulk Pack   \n3  Acco PRESSTEX Data Binder with Storage Hooks, ...   \n4                     SAFCO Steel Folding Chair, Red   \n\n                                     Recommendation2  \\\n0                            Kleencut Trimmer, Steel   \n1                          Motorola Audio Dock, VoIP   \n2                          Smead Lockers, Industrial   \n3  Square Credit Card Reader, 4 1/2\" x 4 1/2\" x 1...   \n4                                Eldon Lockers, Blue   \n\n                               Recommendation3                Recommendation4  \\\n0                         Eldon Shelving, Blue    SanDisk Mouse, Programmable   \n1              Sanford Sketch Pad, Fluorescent  Eldon File Cart, Single Width   \n2                        Hoover Blender, White         Ibico Index Tab, Clear   \n3  Fellowes PB200 Plastic Comb Binding Machine   Mitel MiVoice 5330e IP Phone   \n4                        Tenex Box, Industrial  Green Bar Note Cards, Premium   \n\n                       Recommendation5  \n0  Harbour Creations Swivel Stool, Red  \n1    Binney & Smith Canvas, Easy-Erase  \n2        Belkin Memory Card, Erganomic  \n3  Mophie Juice Pack Helium for iPhone  \n4             SanDisk Memory Card, USB  "
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_recommendations.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_recommendations=df_recommendations[df_recommendations.Market=='Africa'].reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_recommendations['Tag']=df_recommendations['Customer_Name']+'_'+df_recommendations['Market']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_recommendations['Tag']=df_recommendations['Tag'].str.replace(' ','_')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>index</th>\n      <th>Customer_ID</th>\n      <th>Customer_Name</th>\n      <th>Market</th>\n      <th>Recommendation1</th>\n      <th>Recommendation2</th>\n      <th>Recommendation3</th>\n      <th>Recommendation4</th>\n      <th>Recommendation5</th>\n      <th>Tag</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>16</td>\n      <td>AA-315</td>\n      <td>Alex Avila</td>\n      <td>Africa</td>\n      <td>Tenex Stacking Tray, Erganomic</td>\n      <td>Deflect-O Stacking Tray, Durable</td>\n      <td>Cardinal Binder, Recycled</td>\n      <td>Canon Fax Machine, High-Speed</td>\n      <td>Nokia Speaker Phone, Cordless</td>\n      <td>Alex_Avila_Africa</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>18</td>\n      <td>AA-375</td>\n      <td>Allen Armold</td>\n      <td>Africa</td>\n      <td>Stiletto Ruler, Easy Grip</td>\n      <td>Eaton Computer Printout Paper, 8.5 x 11</td>\n      <td>Stanley Pencil Sharpener, Water Color</td>\n      <td>Ibico Binding Machine, Recycled</td>\n      <td>GlobeWeis Clasp Envelope, Recycled</td>\n      <td>Allen_Armold_Africa</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>21</td>\n      <td>AA-480</td>\n      <td>Andrew Allen</td>\n      <td>Africa</td>\n      <td>Fellowes File Cart, Wire Frame</td>\n      <td>Ibico Binder, Recycled</td>\n      <td>Stanley Markers, Water Color</td>\n      <td>Hamilton Beach Stove, Silver</td>\n      <td>Boston Markers, Easy-Erase</td>\n      <td>Andrew_Allen_Africa</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>24</td>\n      <td>AA-645</td>\n      <td>Anna Andreadi</td>\n      <td>Africa</td>\n      <td>SanDisk Memo Slips, 8.5 x 11</td>\n      <td>Stiletto Ruler, Easy Grip</td>\n      <td>Eaton Computer Printout Paper, 8.5 x 11</td>\n      <td>Boston Canvas, Fluorescent</td>\n      <td>Boston Markers, Easy-Erase</td>\n      <td>Anna_Andreadi_Africa</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>50</td>\n      <td>AB-105</td>\n      <td>Adrian Barton</td>\n      <td>Africa</td>\n      <td>Tenex Lockers, Blue</td>\n      <td>StarTech Card Printer, Wireless</td>\n      <td>Green Bar Parchment Paper, 8.5 x 11</td>\n      <td>Eldon Shelving, Wire Frame</td>\n      <td>Memorex Keyboard, Bluetooth</td>\n      <td>Adrian_Barton_Africa</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
      "text/plain": "   index Customer_ID  Customer_Name  Market                 Recommendation1  \\\n0     16      AA-315     Alex Avila  Africa  Tenex Stacking Tray, Erganomic   \n1     18      AA-375   Allen Armold  Africa       Stiletto Ruler, Easy Grip   \n2     21      AA-480   Andrew Allen  Africa  Fellowes File Cart, Wire Frame   \n3     24      AA-645  Anna Andreadi  Africa    SanDisk Memo Slips, 8.5 x 11   \n4     50      AB-105  Adrian Barton  Africa             Tenex Lockers, Blue   \n\n                           Recommendation2  \\\n0         Deflect-O Stacking Tray, Durable   \n1  Eaton Computer Printout Paper, 8.5 x 11   \n2                   Ibico Binder, Recycled   \n3                Stiletto Ruler, Easy Grip   \n4          StarTech Card Printer, Wireless   \n\n                           Recommendation3                  Recommendation4  \\\n0                Cardinal Binder, Recycled    Canon Fax Machine, High-Speed   \n1    Stanley Pencil Sharpener, Water Color  Ibico Binding Machine, Recycled   \n2             Stanley Markers, Water Color     Hamilton Beach Stove, Silver   \n3  Eaton Computer Printout Paper, 8.5 x 11       Boston Canvas, Fluorescent   \n4      Green Bar Parchment Paper, 8.5 x 11       Eldon Shelving, Wire Frame   \n\n                      Recommendation5                   Tag  \n0       Nokia Speaker Phone, Cordless     Alex_Avila_Africa  \n1  GlobeWeis Clasp Envelope, Recycled   Allen_Armold_Africa  \n2          Boston Markers, Easy-Erase   Andrew_Allen_Africa  \n3          Boston Markers, Easy-Erase  Anna_Andreadi_Africa  \n4         Memorex Keyboard, Bluetooth  Adrian_Barton_Africa  "
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_recommendations.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "0                Alex Avila\n1              Allen Armold\n2              Andrew Allen\n3             Anna Andreadi\n4             Adrian Barton\n5             Aaron Bergman\n6               Alan Barnes\n7      Alejandro Ballentine\n8           Adam Bellavance\n9                 Ann Blume\n10            Alyssa Crouse\n11                  Amy Cox\n12                Ann Chong\n13               Anna Chung\n14           Alan Dominguez\n15             Art Ferguson\n16               Art Foster\n17          Alejandro Grove\n18      Aleksandra Gannaway\n19             Alex Grayson\n20           Allen Goldenen\n21          Andrew Gjertsen\n22             Andy Gerbode\n23              Anna Gayman\n24        Anthony Garverick\n25            Arthur Gainer\n26              Adrian Hane\n27              Alan Haines\n28               Alan Hwang\n29            Aaron Hawkins\n               ...         \n724            Todd Sumrall\n725             Tom Stivers\n726              Tony Sayre\n727            Troy Staebel\n728           Trudy Schmidt\n729             Ted Trevino\n730         Thomas Thornton\n731             Tim Taslimi\n732           Tonja Turnell\n733       Tamara Willingham\n734            Tom Zandusky\n735               Tracy Zic\n736        Victoria Brennan\n737       Valerie Dominguez\n738          Vicky Freymann\n739          Vivek Gonzalez\n740             Vivek Grady\n741         Valerie Mitchum\n742           Vivian Mathis\n743            Victor Preis\n744        Victoria Pisteka\n745        Vivek Sundaresam\n746        Valerie Takahito\n747         Victoria Wilson\n748           William Brown\n749            Xylona Preis\n750          Yoseph Carroll\n751           Yana Sorensen\n752        Zuschuss Carroll\n753      Zuschuss Donatelli\nName: Customer_Name, Length: 754, dtype: object"
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_recommendations.Customer_Name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "dict_list=[]\n",
    "for i in range(df_recommendations.shape[0]):\n",
    "\n",
    "\n",
    "    data_dict={}\n",
    "    data_dict['tag']=df_recommendations['Tag'][i]\n",
    "    data_dict['patterns']=[df_recommendations['Customer_Name'][i]]\n",
    "    data_dict['responses']=[df_recommendations['Recommendation1'][i],df_recommendations['Recommendation2'][i],df_recommendations['Recommendation3'][i],df_recommendations['Recommendation4'][i],df_recommendations['Recommendation5'][i]]\n",
    "    intents['intents'].append(data_dict)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "\"for i in range(df_recommendations.shape[0]):\\ndef dic(row):\\n    data_dict={}\\n    data_dict['tag']=row['Tag']\\n    data_dict['patterns']=[row['Customer_Name'],row['Market']]\\n    data_dict['responses']=[row['Recommendation1'],row['Recommendation2'],row['Recommendation3'],row['Recommendation4'],row['Recommendation5']]\\n    data_dict['context']=['']\\n    return dict_list\\n    \\ndf_recommendations.apply(lambda row:dic(row),axis=1)\""
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''for i in range(df_recommendations.shape[0]):\n",
    "def dic(row):\n",
    "    data_dict={}\n",
    "    data_dict['tag']=row['Tag']\n",
    "    data_dict['patterns']=[row['Customer_Name'],row['Market']]\n",
    "    data_dict['responses']=[row['Recommendation1'],row['Recommendation2'],row['Recommendation3'],row['Recommendation4'],row['Recommendation5']]\n",
    "    data_dict['context']=['']\n",
    "    return dict_list\n",
    "    \n",
    "df_recommendations.apply(lambda row:dic(row),axis=1)'''\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": "[nltk_data] Downloading package punkt to /Users/kforster/nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n"
    },
    {
     "data": {
      "text/plain": "True"
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import nltk\n",
    "nltk.download('punkt')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ">When working with text data, we need to perform various preprocessing on the data before we make a machine learning or a deep learning model. Tokenizing is the most basic and first thing you can do on text data. Tokenizing is the process of breaking the whole text into small parts like words.\n",
    ">>Here we iterate through the patterns and tokenize the sentence using nltk.word_tokenize() function and append each word in the words list. We also create a list of classes for our tags."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "for intent in intents['intents']:\n",
    "    for pattern in intent['patterns']:\n",
    "        #tokenize each word\n",
    "        w = nltk.word_tokenize(pattern)\n",
    "        #add it to the list\n",
    "        words.extend(w)\n",
    "        #add documents in the corpus\n",
    "        documents.append((w, intent['tag']))\n",
    "        # add to our classes list\n",
    "        if intent['tag'] not in classes:\n",
    "            classes.append(intent['tag'])\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "ca'),\n (['Jennifer', 'Ferguson'], 'Jennifer_Ferguson_Africa'),\n (['Jeremy', 'Farry'], 'Jeremy_Farry_Africa'),\n (['Jill', 'Fjeld'], 'Jill_Fjeld_Africa'),\n (['Jack', 'Garza'], 'Jack_Garza_Africa'),\n (['James', 'Galang'], 'James_Galang_Africa'),\n (['John', 'Grady'], 'John_Grady_Africa'),\n (['Jennifer', 'Halladay'], 'Jennifer_Halladay_Africa'),\n (['John', 'Huston'], 'John_Huston_Africa'),\n (['Jonathan', 'Howell'], 'Jonathan_Howell_Africa'),\n (['Joseph', 'Holt'], 'Joseph_Holt_Africa'),\n (['Justin', 'Hirsh'], 'Justin_Hirsh_Africa'),\n (['Jennifer', 'Jackson'], 'Jennifer_Jackson_Africa'),\n (['Joel', 'Jenkins'], 'Joel_Jenkins_Africa'),\n (['Jamie', 'Kunitz'], 'Jamie_Kunitz_Africa'),\n (['Jason', 'Klamczynski'], 'Jason_Klamczynski_Africa'),\n (['Jay', 'Kimmel'], 'Jay_Kimmel_Africa'),\n (['Jim', 'Karlsson'], 'Jim_Karlsson_Africa'),\n (['Jim', 'Kriz'], 'Jim_Kriz_Africa'),\n (['Joe', 'Kamberova'], 'Joe_Kamberova_Africa'),\n (['Juliana', 'Krohn'], 'Juliana_Krohn_Africa'),\n (['Julie', 'Kriz'], 'Julie_Kriz_Africa'),\n (['Jack', 'Lebron'], 'Jack_Lebron_Africa'),\n (['James', 'Lanier'], 'James_Lanier_Africa'),\n (['Jeremy', 'Lonsdale'], 'Jeremy_Lonsdale_Africa'),\n (['John', 'Lee'], 'John_Lee_Africa'),\n (['John', 'Lucas'], 'John_Lucas_Africa'),\n (['Janet', 'Martin'], 'Janet_Martin_Africa'),\n (['Janet', 'Molinari'], 'Janet_Molinari_Africa'),\n (['Jessica', 'Myrick'], 'Jessica_Myrick_Africa'),\n (['Jill', 'Matthias'], 'Jill_Matthias_Africa'),\n (['Jim', 'Mitchum'], 'Jim_Mitchum_Africa'),\n (['John', 'Murray'], 'John_Murray_Africa'),\n (['Justin', 'MacKendrick'], 'Justin_MacKendrick_Africa'),\n (['Jack', \"O'Briant\"], \"Jack_O'Briant_Africa\"),\n (['Jesus', 'Ocampo'], 'Jesus_Ocampo_Africa'),\n (['Jennifer', 'Patt'], 'Jennifer_Patt_Africa'),\n (['Jeremy', 'Pistek'], 'Jeremy_Pistek_Africa'),\n (['Julie', 'Prescott'], 'Julie_Prescott_Africa'),\n (['Jim', 'Radford'], 'Jim_Radford_Africa'),\n (['Jocasta', 'Rupert'], 'Jocasta_Rupert_Africa'),\n (['Justin', 'Ritter'], 'Justin_Ritter_Africa'),\n (['Jill', 'Stevenson'], 'Jill_Stevenson_Africa'),\n (['Jim', 'Sink'], 'Jim_Sink_Africa'),\n (['John', 'Stevenson'], 'John_Stevenson_Africa'),\n (['Joni', 'Sundaresam'], 'Joni_Sundaresam_Africa'),\n (['Joy', 'Smith'], 'Joy_Smith_Africa'),\n (['Jane', 'Waco'], 'Jane_Waco_Africa'),\n (['Joni', 'Wasserman'], 'Joni_Wasserman_Africa'),\n (['Julia', 'West'], 'Julia_West_Africa'),\n (['Kelly', 'Andreada'], 'Kelly_Andreada_Africa'),\n (['Karen', 'Bern'], 'Karen_Bern_Africa'),\n (['Karl', 'Braun'], 'Karl_Braun_Africa'),\n (['Ken', 'Brennan'], 'Ken_Brennan_Africa'),\n (['Karen', 'Carlisle'], 'Karen_Carlisle_Africa'),\n (['Kelly', 'Collister'], 'Kelly_Collister_Africa'),\n (['Kimberly', 'Carter'], 'Kimberly_Carter_Africa'),\n (['Katherine', 'Ducich'], 'Katherine_Ducich_Africa'),\n (['Keith', 'Dawkins'], 'Keith_Dawkins_Africa'),\n (['Ken', 'Dana'], 'Ken_Dana_Africa'),\n (['Katrina', 'Edelman'], 'Katrina_Edelman_Africa'),\n (['Karen', 'Ferguson'], 'Karen_Ferguson_Africa'),\n (['Katharine', 'Harms'], 'Katharine_Harms_Africa'),\n (['Katherine', 'Hughes'], 'Katherine_Hughes_Africa'),\n (['Keith', 'Herrera'], 'Keith_Herrera_Africa'),\n (['Ken', 'Heidel'], 'Ken_Heidel_Africa'),\n (['Kristen', 'Hastings'], 'Kristen_Hastings_Africa'),\n (['Kelly', 'Lampkin'], 'Kelly_Lampkin_Africa'),\n (['Ken', 'Lonsdale'], 'Ken_Lonsdale_Africa'),\n (['Kalyca', 'Meade'], 'Kalyca_Meade_Africa'),\n (['Katherine', 'Murray'], 'Katherine_Murray_Africa'),\n (['Khloe', 'Miller'], 'Khloe_Miller_Africa'),\n (['Katherine', 'Nockton'], 'Katherine_Nockton_Africa'),\n (['Kean', 'Nguyen'], 'Kean_Nguyen_Africa'),\n (['Kristina', 'Nunn'], 'Kristina_Nunn_Africa'),\n (['Karen', 'Seio'], 'Karen_Seio_Africa'),\n (['Kean', 'Takahito'], 'Kean_Takahito_Africa'),\n (['Kean', 'Thornton'], 'Kean_Thornton_Africa'),\n (['Katrina', 'Willman'], 'Katrina_Willman_Africa'),\n (['Kelly', 'Williams'], 'Kelly_Williams_Africa'),\n (['Laura', 'Armstrong'], 'Laura_Armstrong_Africa'),\n (['Larry', 'Blacks'], 'Larry_Blacks_Africa'),\n (['Laurel', 'Beltran'], 'Laurel_Beltran_Africa'),\n (['Lena', 'Cacioppo'], 'Lena_Cacioppo_Africa'),\n (['Lena', 'Creighton'], 'Lena_Creighton_Africa'),\n (['Linda', 'Cazamias'], 'Linda_Cazamias_Africa'),\n (['Lindsay', 'Castell'], 'Lindsay_Castell_Africa'),\n (['Liz', 'Carlisle'], 'Liz_Carlisle_Africa'),\n (['Logan', 'Currie'], 'Logan_Currie_Africa'),\n (['Lela', 'Donovan'], 'Lela_Donovan_Africa'),\n (['Lisa', 'DeCherney'], 'Lisa_DeCherney_Africa'),\n (['Luke', 'Foster'], 'Luke_Foster_Africa'),\n (['Larry', 'Hughes'], 'Larry_Hughes_Africa'),\n (['Lena', 'Hernandez'], 'Lena_Hernandez_Africa'),\n (['Lisa', 'Hazard'], 'Lisa_Hazard_Africa'),\n (['Logan', 'Haushalter'], 'Logan_Haushalter_Africa'),\n (['Lauren', 'Leatherbury'], 'Lauren_Leatherbury_Africa'),\n (['Liz', 'MacKendrick'], 'Liz_MacKendrick_Africa'),\n (['Lori', 'Olson'], 'Lori_Olson_Africa'),\n (['Liz', 'Pelletier'], 'Liz_Pelletier_Africa'),\n (['Liz', 'Preis'], 'Liz_Preis_Africa'),\n (['Lena', 'Radford'], 'Lena_Radford_Africa'),\n (['Lisa', 'Ryan'], 'Lisa_Ryan_Africa'),\n (['Linda', 'Southworth'], 'Linda_Southworth_Africa'),\n (['Lindsay', 'Shagiari'], 'Lindsay_Shagiari_Africa'),\n (['Lycoris', 'Saunders'], 'Lycoris_Saunders_Africa'),\n (['Lynn', 'Smith'], 'Lynn_Smith_Africa'),\n (['Larry', 'Tron'], 'Larry_Tron_Africa'),\n (['Liz', 'Thompson'], 'Liz_Thompson_Africa'),\n (['Laurel', 'Workman'], 'Laurel_Workman_Africa'),\n (['Lindsay', 'Williams'], 'Lindsay_Williams_Africa'),\n (['Liz', 'Willingham'], 'Liz_Willingham_Africa'),\n (['Luke', 'Weiss'], 'Luke_Weiss_Africa'),\n (['Matt', 'Abelman'], 'Matt_Abelman_Africa'),\n (['Michelle', 'Arnett'], 'Michelle_Arnett_Africa'),\n (['Maria', 'Bertelson'], 'Maria_Bertelson_Africa'),\n (['Mick', 'Brown'], 'Mick_Brown_Africa'),\n (['Marc', 'Crier'], 'Marc_Crier_Africa'),\n (['Mark', 'Cousins'], 'Mark_Cousins_Africa'),\n (['Matt', 'Collins'], 'Matt_Collins_Africa'),\n (['Matt', 'Collister'], 'Matt_Collister_Africa'),\n (['Matt', 'Connell'], 'Matt_Connell_Africa'),\n (['Matthew', 'Clasen'], 'Matthew_Clasen_Africa'),\n (['Michael', 'Chen'], 'Michael_Chen_Africa'),\n (['Mike', 'Caudle'], 'Mike_Caudle_Africa'),\n (['Maribeth', 'Dona'], 'Maribeth_Dona_Africa'),\n (['Maria', 'Etezadi'], 'Maria_Etezadi_Africa'),\n (['Max', 'Engle'], 'Max_Engle_Africa'),\n (['Michelle', 'Ellison'], 'Michelle_Ellison_Africa'),\n (['Maureen', 'Fritzler'], 'Maureen_Fritzler_Africa'),\n (['Monica', 'Federle'], 'Monica_Federle_Africa'),\n (['Matthew', 'Grinstein'], 'Matthew_Grinstein_Africa'),\n (['Maureen', 'Gastineau'], 'Maureen_Gastineau_Africa'),\n (['Maureen', 'Gnade'], 'Maureen_Gnade_Africa'),\n (['Michael', 'Grace'], 'Michael_Grace_Africa'),\n (['Mike', 'Gockenbach'], 'Mike_Gockenbach_Africa'),\n (['Mitch', 'Gastineau'], 'Mitch_Gastineau_Africa'),\n (['Marc', 'Harrigan'], 'Marc_Harrigan_Africa'),\n (['Mark', 'Haberlin'], 'Mark_Haberlin_Africa'),\n (['Mark', 'Hamilton'], 'Mark_Hamilton_Africa'),\n (['Matt', 'Hagelstein'], 'Matt_Hagelstein_Africa'),\n (['Maya', 'Herman'], 'Maya_Herman_Africa'),\n (['Michelle', 'Huthwaite'], 'Michelle_Huthwaite_Africa'),\n (['Mick', 'Hernandez'], 'Mick_Hernandez_Africa'),\n (['Max', 'Jones'], 'Max_Jones_Africa'),\n (['Michael', 'Kennedy'], 'Michael_Kennedy_Africa'),\n (['Mike', 'Kennedy'], 'Mike_Kennedy_Africa'),\n (['Marina', 'Lichtenstein'], 'Marina_Lichtenstein_Africa'),\n (['Max', 'Ludwig'], 'Max_Ludwig_Africa'),\n (['Michelle', 'Lonsdale'], 'Michelle_Lonsdale_Africa'),\n (['Muhammed', 'Lee'], 'Muhammed_Lee_Africa'),\n (['Magdelene', 'Morse'], 'Magdelene_Morse_Africa'),\n (['Michael', 'Moore'], 'Michael_Moore_Africa'),\n (['Michelle', 'Moray'], 'Michelle_Moray_Africa'),\n (['Muhammed', 'MacIntyre'], 'Muhammed_MacIntyre_Africa'),\n (['Michael', 'Nguyen'], 'Michael_Nguyen_Africa'),\n (['Mary', \"O'Rourke\"], \"Mary_O'Rourke_Africa\"),\n (['Meg', \"O'Connel\"], \"Meg_O'Connel_Africa\"),\n (['Michael', 'Oakman'], 'Michael_Oakman_Africa'),\n (['Mark', 'Packer'], 'Mark_Packer_Africa'),\n (['Michael', 'Paige'], 'Michael_Paige_Africa'),\n (['Mike', 'Pelletier'], 'Mike_Pelletier_Africa'),\n (['Mathew', 'Reese'], 'Mathew_Reese_Africa'),\n (['Maribeth', 'Schnelling'], 'Maribeth_Schnelling_Africa'),\n (['MaryBeth', 'Skach'], 'MaryBeth_Skach_Africa'),\n (['Maurice', 'Satty'], 'Maurice_Satty_Africa'),\n (['Maxwell', 'Schwartz'], 'Maxwell_Schwartz_Africa'),\n (['Melanie', 'Seite'], 'Melanie_Seite_Africa'),\n (['Michael', 'Stewart'], 'Michael_Stewart_Africa'),\n (['Meg', 'Tillman'], 'Meg_Tillman_Africa'),\n (['Michelle', 'Tran'], 'Michelle_Tran_Africa'),\n (['Mark', 'Van', 'Huff'], 'Mark_Van_Huff_Africa'),\n (['Mike', 'Vittorini'], 'Mike_Vittorini_Africa'),\n (['Mitch', 'Webber'], 'Mitch_Webber_Africa'),\n (['Mitch', 'Willingham'], 'Mitch_Willingham_Africa'),\n (['Maribeth', 'Yedwab'], 'Maribeth_Yedwab_Africa'),\n (['Muhammed', 'Yedwab'], 'Muhammed_Yedwab_Africa'),\n (['Maria', 'Zettner'], 'Maria_Zettner_Africa'),\n (['Mary', 'Zewe'], 'Mary_Zewe_Africa'),\n (['Nicole', 'Brennan'], 'Nicole_Brennan_Africa'),\n (['Nona', 'Balk'], 'Nona_Balk_Africa'),\n (['Nat', 'Carroll'], 'Nat_Carroll_Africa'),\n (['Nathan', 'Cano'], 'Nathan_Cano_Africa'),\n (['Nick', 'Crebassa'], 'Nick_Crebassa_Africa'),\n (['Noah', 'Childs'], 'Noah_Childs_Africa'),\n (['Natalie', 'DeCherney'], 'Natalie_DeCherney_Africa'),\n (['Neil', 'Ducich'], 'Neil_Ducich_Africa'),\n (['Natalie', 'Fritzler'], 'Natalie_Fritzler_Africa'),\n (['Neil', 'Französisch'], 'Neil_Französisch_Africa'),\n (['Nicole', 'Fjeld'], 'Nicole_Fjeld_Africa'),\n (['Nat', 'Gilpin'], 'Nat_Gilpin_Africa'),\n (['Nathan', 'Gelder'], 'Nathan_Gelder_Africa'),\n (['Nicole', 'Hansen'], 'Nicole_Hansen_Africa'),\n (['Neil', 'Knudson'], 'Neil_Knudson_Africa'),\n (['Nancy', 'Lomonaco'], 'Nancy_Lomonaco_Africa'),\n (['Nathan', 'Mautz'], 'Nathan_Mautz_Africa'),\n (['Naresj', 'Patel'], 'Naresj_Patel_Africa'),\n (['Nora', 'Paige'], 'Nora_Paige_Africa'),\n (['Nora', 'Pelletier'], 'Nora_Pelletier_Africa'),\n (['Nora', 'Preis'], 'Nora_Preis_Africa'),\n (['Nick', 'Radford'], 'Nick_Radford_Africa'),\n (['Neola', 'Schneider'], 'Neola_Schneider_Africa'),\n (['Noel', 'Staavos'], 'Noel_Staavos_Africa'),\n (['Natalie', 'Webber'], 'Natalie_Webber_Africa'),\n (['Odella', 'Nelson'], 'Odella_Nelson_Africa'),\n (['Olvera', 'Toch'], 'Olvera_Toch_Africa'),\n (['Pete', 'Armstrong'], 'Pete_Armstrong_Africa'),\n (['Patrick', 'Bzostek'], 'Patrick_Bzostek_Africa'),\n (['Philip', 'Brown'], 'Philip_Brown_Africa'),\n (['Phillip', 'Breyer'], 'Phillip_Breyer_Africa'),\n (['Pamela', 'Coakley'], 'Pamela_Coakley_Africa'),\n (['Pauline', 'Chand'], 'Pauline_Chand_Africa'),\n (['Peter', 'Fuller'], 'Peter_Fuller_Africa'),\n (['Philip', 'Fox'], 'Philip_Fox_Africa'),\n (['Phillip', 'Flathmann'], 'Phillip_Flathmann_Africa'),\n (['Patrick', 'Gardner'], 'Patrick_Gardner_Africa'),\n (['Paul', 'Gonzalez'], 'Paul_Gonzalez_Africa'),\n (['Patricia', 'Hirasaki'], 'Patricia_Hirasaki_Africa'),\n (['Patrick', 'Jones'], 'Patrick_Jones_Africa'),\n (['Pauline', 'Johnson'], 'Pauline_Johnson_Africa'),\n (['Pete', 'Kriz'], 'Pete_Kriz_Africa'),\n (['Paul', 'Lucas'], 'Paul_Lucas_Africa'),\n (['Paul', 'MacIntyre'], 'Paul_MacIntyre_Africa'),\n (['Peter', 'McVee'], 'Peter_McVee_Africa'),\n (['Parhena', 'Norris'], 'Parhena_Norris_Africa'),\n (['Patrick', \"O'Brill\"], \"Patrick_O'Brill_Africa\"),\n (['Patrick', \"O'Donnell\"], \"Patrick_O'Donnell_Africa\"),\n (['Philisse', 'Overcash'], 'Philisse_Overcash_Africa'),\n (['Phillina', 'Ober'], 'Phillina_Ober_Africa'),\n (['Paul', 'Prost'], 'Paul_Prost_Africa'),\n (['Patrick', 'Ryan'], 'Patrick_Ryan_Africa'),\n (['Pamela', 'Stobb'], 'Pamela_Stobb_Africa'),\n (['Paul', 'Stevenson'], 'Paul_Stevenson_Africa'),\n (['Penelope', 'Sewall'], 'Penelope_Sewall_Africa'),\n (['Pete', 'Takahito'], 'Pete_Takahito_Africa'),\n (['Paul', 'Van', 'Hugh'], 'Paul_Van_Hugh_Africa'),\n (['Pauline', 'Webber'], 'Pauline_Webber_Africa'),\n (['Pierre', 'Wener'], 'Pierre_Wener_Africa'),\n (['Quincy', 'Jones'], 'Quincy_Jones_Africa'),\n (['Ralph', 'Arnett'], 'Ralph_Arnett_Africa'),\n (['Ruben', 'Ausman'], 'Ruben_Ausman_Africa'),\n (['Russell', 'Applegate'], 'Russell_Applegate_Africa'),\n (['Ryan', 'Akin'], 'Ryan_Akin_Africa'),\n (['Randy', 'Bradley'], 'Randy_Bradley_Africa'),\n (['Raymond', 'Buch'], 'Raymond_Buch_Africa'),\n (['Richard', 'Bierner'], 'Richard_Bierner_Africa'),\n (['Rick', 'Bensley'], 'Rick_Bensley_Africa'),\n (['Rob', 'Beeghly'], 'Rob_Beeghly_Africa'),\n (['Robert', 'Barroso'], 'Robert_Barroso_Africa'),\n (['Roger', 'Barcio'], 'Roger_Barcio_Africa'),\n (['Ross', 'Baird'], 'Ross_Baird_Africa'),\n (['Ryan', 'Crowe'], 'Ryan_Crowe_Africa'),\n (['Rick', 'Duston'], 'Rick_Duston_Africa'),\n (['Rob', 'Dowd'], 'Rob_Dowd_Africa'),\n (['Robert', 'Dilbeck'], 'Robert_Dilbeck_Africa'),\n (['Roger', 'Demir'], 'Roger_Demir_Africa'),\n (['Ross', 'DeVincentis'], 'Ross_DeVincentis_Africa'),\n (['Ruben', 'Dartt'], 'Ruben_Dartt_Africa'),\n (['Russell', \"D'Ascenzo\"], \"Russell_D'Ascenzo_Africa\"),\n (['Ricardo', 'Emerson'], 'Ricardo_Emerson_Africa'),\n (['Richard', 'Eichhorn'], 'Richard_Eichhorn_Africa'),\n (['Randy', 'Ferguson'], 'Randy_Ferguson_Africa'),\n (['Roy', 'Französisch'], 'Roy_Französisch_Africa'),\n (['Rick', 'Hansen'], 'Rick_Hansen_Africa'),\n (['Rick', 'Huthwaite'], 'Rick_Huthwaite_Africa'),\n (['Ritsa', 'Hightower'], 'Ritsa_Hightower_Africa'),\n (['Rob', 'Haberlin'], 'Rob_Haberlin_Africa'),\n (['Ralph', 'Kennedy'], 'Ralph_Kennedy_Africa'),\n (['Rob', 'Lucas'], 'Rob_Lucas_Africa'),\n (['Raymond', 'Messe'], 'Raymond_Messe_Africa'),\n (['Robert', 'Marley'], 'Robert_Marley_Africa'),\n (['Roland', 'Murray'], 'Roland_Murray_Africa'),\n (['Rose', \"O'Brian\"], \"Rose_O'Brian_Africa\"),\n (['Rachel', 'Payne'], 'Rachel_Payne_Africa'),\n (['Resi', 'Pölking'], 'Resi_Pölking_Africa'),\n (['Roy', 'Phan'], 'Roy_Phan_Africa'),\n (['Ralph', 'Ritter'], 'Ralph_Ritter_Africa'),\n (['Ricardo', 'Sperren'], 'Ricardo_Sperren_Africa'),\n (['Roland', 'Schwarz'], 'Roland_Schwarz_Africa'),\n (['Roy', 'Skaria'], 'Roy_Skaria_Africa'),\n (['Rick', 'Wilson'], 'Rick_Wilson_Africa'),\n (['Rob', 'Williams'], 'Rob_Williams_Africa'),\n (['Robert', 'Waldorf'], 'Robert_Waldorf_Africa'),\n (['Sue', 'Ann', 'Reed'], 'Sue_Ann_Reed_Africa'),\n (['Sarah', 'Bern'], 'Sarah_Bern_Africa'),\n (['Sarah', 'Brown'], 'Sarah_Brown_Africa'),\n (['Sam', 'Craven'], 'Sam_Craven_Africa'),\n (['Sample', 'Company', 'A'], 'Sample_Company_A_Africa'),\n (['Sanjit', 'Chand'], 'Sanjit_Chand_Africa'),\n (['Scot', 'Coram'], 'Scot_Coram_Africa'),\n (['Sean', 'Christensen'], 'Sean_Christensen_Africa'),\n (['Shahid', 'Collister'], 'Shahid_Collister_Africa'),\n (['Shaun', 'Chance'], 'Shaun_Chance_Africa'),\n (['Steve', 'Carroll'], 'Steve_Carroll_Africa'),\n (['Steve', 'Chapman'], 'Steve_Chapman_Africa'),\n (['Steven', 'Cartwright'], 'Steven_Cartwright_Africa'),\n (['Stewart', 'Carmichael'], 'Stewart_Carmichael_Africa'),\n (['Stuart', 'Calhoun'], 'Stuart_Calhoun_Africa'),\n (['Sung', 'Chung'], 'Sung_Chung_Africa'),\n (['Shirley', 'Daniels'], 'Shirley_Daniels_Africa'),\n (['Sanjit', 'Engle'], 'Sanjit_Engle_Africa'),\n (['Sandra', 'Flanagan'], 'Sandra_Flanagan_Africa'),\n (['Sarah', 'Foster'], 'Sarah_Foster_Africa'),\n (['Sylvia', 'Foulston'], 'Sylvia_Foulston_Africa'),\n (['Sandra', 'Glassco'], 'Sandra_Glassco_Africa'),\n (['Sheri', 'Gordon'], 'Sheri_Gordon_Africa'),\n (['Speros', 'Goranitis'], 'Speros_Goranitis_Africa'),\n (['Susan', 'Gilcrest'], 'Susan_Gilcrest_Africa'),\n (['Shahid', 'Hopkins'], 'Shahid_Hopkins_Africa'),\n (['Sally', 'Hughsby'], 'Sally_Hughsby_Africa'),\n (['Sanjit', 'Jacobs'], 'Sanjit_Jacobs_Africa'),\n (['Sarah', 'Jordon'], 'Sarah_Jordon_Africa'),\n (['Sally', 'Knutson'], 'Sally_Knutson_Africa'),\n (['Sara', 'Luxemburg'], 'Sara_Luxemburg_Africa'),\n (['Sally', 'Matthias'], 'Sally_Matthias_Africa'),\n (['Sean', 'Miller'], 'Sean_Miller_Africa'),\n (['Susan', 'MacKendrick'], 'Susan_MacKendrick_Africa'),\n (['Suzanne', 'McNair'], 'Suzanne_McNair_Africa'),\n (['Skye', 'Norling'], 'Skye_Norling_Africa'),\n (['Steve', 'Nguyen'], 'Steve_Nguyen_Africa'),\n (['Sean', \"O'Donnell\"], \"Sean_O'Donnell_Africa\"),\n (['Sibella', 'Parks'], 'Sibella_Parks_Africa'),\n (['Stefania', 'Perrino'], 'Stefania_Perrino_Africa'),\n (['Stephanie', 'Phelps'], 'Stephanie_Phelps_Africa'),\n (['Sung', 'Pak'], 'Sung_Pak_Africa'),\n (['Susan', 'Pistek'], 'Susan_Pistek_Africa'),\n (['Sharelle', 'Roach'], 'Sharelle_Roach_Africa'),\n (['Steven', 'Roelle'], 'Steven_Roelle_Africa'),\n (['Saphhira', 'Shifley'], 'Saphhira_Shifley_Africa'),\n (['Shahid', 'Shariari'], 'Shahid_Shariari_Africa'),\n (['Shirley', 'Schmidt'], 'Shirley_Schmidt_Africa'),\n (['Sonia', 'Sunley'], 'Sonia_Sunley_Africa'),\n (['Sung', 'Shariari'], 'Sung_Shariari_Africa'),\n (['Shui', 'Tom'], 'Shui_Tom_Africa'),\n (['Stephanie', 'Ulpright'], 'Stephanie_Ulpright_Africa'),\n (['Stewart', 'Visinsky'], 'Stewart_Visinsky_Africa'),\n (['Stuart', 'Van'], 'Stuart_Van_Africa'),\n (['Susan', 'Vittorini'], 'Susan_Vittorini_Africa'),\n (['Scot', 'Wooten'], 'Scot_Wooten_Africa'),\n (['Scott', 'Williamson'], 'Scott_Williamson_Africa'),\n (['Sean', 'Wendt'], 'Sean_Wendt_Africa'),\n (['Shaun', 'Weien'], 'Shaun_Weien_Africa'),\n (['Steven', 'Ward'], 'Steven_Ward_Africa'),\n (['Sam', 'Zeldin'], 'Sam_Zeldin_Africa'),\n (['Tom', 'Ashbrook'], 'Tom_Ashbrook_Africa'),\n (['Ted', 'Butterfield'], 'Ted_Butterfield_Africa'),\n (['Thomas', 'Boland'], 'Thomas_Boland_Africa'),\n (['Thomas', 'Brumley'], 'Thomas_Brumley_Africa'),\n (['Tim', 'Brockman'], 'Tim_Brockman_Africa'),\n (['Toby', 'Braunhardt'], 'Toby_Braunhardt_Africa'),\n (['Todd', 'Boyes'], 'Todd_Boyes_Africa'),\n (['Tom', 'Boeckenhauer'], 'Tom_Boeckenhauer_Africa'),\n (['Tracy', 'Blumstein'], 'Tracy_Blumstein_Africa'),\n (['Troy', 'Blackwell'], 'Troy_Blackwell_Africa'),\n (['Trudy', 'Brown'], 'Trudy_Brown_Africa'),\n (['Tamara', 'Chand'], 'Tamara_Chand_Africa'),\n (['Theresa', 'Coyne'], 'Theresa_Coyne_Africa'),\n (['Toby', 'Carlisle'], 'Toby_Carlisle_Africa'),\n (['Tony', 'Chapman'], 'Tony_Chapman_Africa'),\n (['Tracy', 'Collins'], 'Tracy_Collins_Africa'),\n (['Tamara', 'Dahlen'], 'Tamara_Dahlen_Africa'),\n (['Toby', 'Gnade'], 'Toby_Gnade_Africa'),\n (['Trudy', 'Glocke'], 'Trudy_Glocke_Africa'),\n (['Thea', 'Hendricks'], 'Thea_Hendricks_Africa'),\n (['Thea', 'Hudgings'], 'Thea_Hudgings_Africa'),\n (['Tiffany', 'House'], 'Tiffany_House_Africa'),\n (['Tracy', 'Hopkins'], 'Tracy_Hopkins_Africa'),\n (['Tamara', 'Manning'], 'Tamara_Manning_Africa'),\n (['Tony', 'Molinari'], 'Tony_Molinari_Africa'),\n (['Tanja', 'Norvell'], 'Tanja_Norvell_Africa'),\n (['Theone', 'Pippenger'], 'Theone_Pippenger_Africa'),\n (['Tom', 'Prescott'], 'Tom_Prescott_Africa'),\n (['Tracy', 'Poddar'], 'Tracy_Poddar_Africa'),\n (['Toby', 'Ritter'], 'Toby_Ritter_Africa'),\n (['Thais', 'Sissman'], 'Thais_Sissman_Africa'),\n (['Theresa', 'Swint'], 'Theresa_Swint_Africa'),\n (['Thomas', 'Seio'], 'Thomas_Seio_Africa'),\n (['Toby', 'Swindell'], 'Toby_Swindell_Africa'),\n (['Todd', 'Sumrall'], 'Todd_Sumrall_Africa'),\n (['Tom', 'Stivers'], 'Tom_Stivers_Africa'),\n (['Tony', 'Sayre'], 'Tony_Sayre_Africa'),\n (['Troy', 'Staebel'], 'Troy_Staebel_Africa'),\n (['Trudy', 'Schmidt'], 'Trudy_Schmidt_Africa'),\n (['Ted', 'Trevino'], 'Ted_Trevino_Africa'),\n (['Thomas', 'Thornton'], 'Thomas_Thornton_Africa'),\n (['Tim', 'Taslimi'], 'Tim_Taslimi_Africa'),\n (['Tonja', 'Turnell'], 'Tonja_Turnell_Africa'),\n (['Tamara', 'Willingham'], 'Tamara_Willingham_Africa'),\n (['Tom', 'Zandusky'], 'Tom_Zandusky_Africa'),\n (['Tracy', 'Zic'], 'Tracy_Zic_Africa'),\n (['Victoria', 'Brennan'], 'Victoria_Brennan_Africa'),\n (['Valerie', 'Dominguez'], 'Valerie_Dominguez_Africa'),\n (['Vicky', 'Freymann'], 'Vicky_Freymann_Africa'),\n (['Vivek', 'Gonzalez'], 'Vivek_Gonzalez_Africa'),\n (['Vivek', 'Grady'], 'Vivek_Grady_Africa'),\n (['Valerie', 'Mitchum'], 'Valerie_Mitchum_Africa'),\n (['Vivian', 'Mathis'], 'Vivian_Mathis_Africa'),\n (['Victor', 'Preis'], 'Victor_Preis_Africa'),\n (['Victoria', 'Pisteka'], 'Victoria_Pisteka_Africa'),\n (['Vivek', 'Sundaresam'], 'Vivek_Sundaresam_Africa'),\n (['Valerie', 'Takahito'], 'Valerie_Takahito_Africa'),\n (['Victoria', 'Wilson'], 'Victoria_Wilson_Africa'),\n (['William', 'Brown'], 'William_Brown_Africa'),\n (['Xylona', 'Preis'], 'Xylona_Preis_Africa'),\n (['Yoseph', 'Carroll'], 'Yoseph_Carroll_Africa'),\n (['Yana', 'Sorensen'], 'Yana_Sorensen_Africa'),\n (['Zuschuss', 'Carroll'], 'Zuschuss_Carroll_Africa'),\n (['Zuschuss', 'Donatelli'], 'Zuschuss_Donatelli_Africa')]"
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "documents"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": "[nltk_data] Downloading package wordnet to\n[nltk_data]     /Users/kforster/nltk_data...\n[nltk_data]   Package wordnet is already up-to-date!\n"
    },
    {
     "data": {
      "text/plain": "True"
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import nltk\n",
    "nltk.download('wordnet')\n",
    "  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> Now we will lemmatize each word and remove duplicate words from the list. Lemmatizing is the process of converting a word into its lemma form and then creating a pickle file to store the Python objects which we will use while predicting. for example gone will transformed to go."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    " #lemmatize, lower each word and remove duplicates\n",
    "words = [lemmatizer.lemmatize(w.lower()) for w in words if w not in ignore_words]\n",
    "words = sorted(list(set(words)))\n",
    "# sort classes\n",
    "classes = sorted(list(set(classes)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": "nry_Goldwyn_Africa', 'Henry_MacAllister_Africa', 'Herbert_Flentye_Africa', 'Hilary_Holden_Africa', 'Hunter_Glantz_Africa', 'Hunter_Lopez_Africa', 'Ionia_McGrath_Africa', 'Irene_Maddox_Africa', 'Ivan_Gibson_Africa', 'Ivan_Liston_Africa', 'Jack_Garza_Africa', 'Jack_Lebron_Africa', \"Jack_O'Briant_Africa\", 'James_Galang_Africa', 'James_Lanier_Africa', 'Jamie_Frazer_Africa', 'Jamie_Kunitz_Africa', 'Jane_Waco_Africa', 'Janet_Martin_Africa', 'Janet_Molinari_Africa', 'Jason_Fortune-_Africa', 'Jason_Klamczynski_Africa', 'Jasper_Cacioppo_Africa', 'Jay_Fein_Africa', 'Jay_Kimmel_Africa', 'Jenna_Caffey_Africa', 'Jennifer_Braxton_Africa', 'Jennifer_Ferguson_Africa', 'Jennifer_Halladay_Africa', 'Jennifer_Jackson_Africa', 'Jennifer_Patt_Africa', 'Jeremy_Ellison_Africa', 'Jeremy_Farry_Africa', 'Jeremy_Lonsdale_Africa', 'Jeremy_Pistek_Africa', 'Jessica_Myrick_Africa', 'Jesus_Ocampo_Africa', 'Jill_Fjeld_Africa', 'Jill_Matthias_Africa', 'Jill_Stevenson_Africa', 'Jim_Epp_Africa', 'Jim_Karlsson_Africa', 'Jim_Kriz_Africa', 'Jim_Mitchum_Africa', 'Jim_Radford_Africa', 'Jim_Sink_Africa', 'Jocasta_Rupert_Africa', 'Joe_Elijah_Africa', 'Joe_Kamberova_Africa', 'Joel_Eaton_Africa', 'Joel_Jenkins_Africa', 'John_Castell_Africa', 'John_Dryer_Africa', 'John_Grady_Africa', 'John_Huston_Africa', 'John_Lee_Africa', 'John_Lucas_Africa', 'John_Murray_Africa', 'John_Stevenson_Africa', 'Jonathan_Doherty_Africa', 'Jonathan_Howell_Africa', 'Joni_Blumstein_Africa', 'Joni_Sundaresam_Africa', 'Joni_Wasserman_Africa', 'Joseph_Airdo_Africa', 'Joseph_Holt_Africa', 'Joy_Bell-_Africa', 'Joy_Daniels_Africa', 'Joy_Smith_Africa', 'Julia_Barnett_Africa', 'Julia_Dunbar_Africa', 'Julia_West_Africa', 'Juliana_Krohn_Africa', 'Julie_Creighton_Africa', 'Julie_Kriz_Africa', 'Julie_Prescott_Africa', 'Justin_Deggeller_Africa', 'Justin_Ellison_Africa', 'Justin_Hirsh_Africa', 'Justin_MacKendrick_Africa', 'Justin_Ritter_Africa', 'Kalyca_Meade_Africa', 'Karen_Bern_Africa', 'Karen_Carlisle_Africa', 'Karen_Ferguson_Africa', 'Karen_Seio_Africa', 'Karl_Braun_Africa', 'Katharine_Harms_Africa', 'Katherine_Ducich_Africa', 'Katherine_Hughes_Africa', 'Katherine_Murray_Africa', 'Katherine_Nockton_Africa', 'Katrina_Edelman_Africa', 'Katrina_Willman_Africa', 'Kean_Nguyen_Africa', 'Kean_Takahito_Africa', 'Kean_Thornton_Africa', 'Keith_Dawkins_Africa', 'Keith_Herrera_Africa', 'Kelly_Andreada_Africa', 'Kelly_Collister_Africa', 'Kelly_Lampkin_Africa', 'Kelly_Williams_Africa', 'Ken_Brennan_Africa', 'Ken_Dana_Africa', 'Ken_Heidel_Africa', 'Ken_Lonsdale_Africa', 'Khloe_Miller_Africa', 'Kimberly_Carter_Africa', 'Kristen_Hastings_Africa', 'Kristina_Nunn_Africa', 'Larry_Blacks_Africa', 'Larry_Hughes_Africa', 'Larry_Tron_Africa', 'Laura_Armstrong_Africa', 'Laurel_Beltran_Africa', 'Laurel_Workman_Africa', 'Lauren_Leatherbury_Africa', 'Lela_Donovan_Africa', 'Lena_Cacioppo_Africa', 'Lena_Creighton_Africa', 'Lena_Hernandez_Africa', 'Lena_Radford_Africa', 'Linda_Cazamias_Africa', 'Linda_Southworth_Africa', 'Lindsay_Castell_Africa', 'Lindsay_Shagiari_Africa', 'Lindsay_Williams_Africa', 'Lisa_DeCherney_Africa', 'Lisa_Hazard_Africa', 'Lisa_Ryan_Africa', 'Liz_Carlisle_Africa', 'Liz_MacKendrick_Africa', 'Liz_Pelletier_Africa', 'Liz_Preis_Africa', 'Liz_Thompson_Africa', 'Liz_Willingham_Africa', 'Logan_Currie_Africa', 'Logan_Haushalter_Africa', 'Lori_Olson_Africa', 'Luke_Foster_Africa', 'Luke_Weiss_Africa', 'Lycoris_Saunders_Africa', 'Lynn_Smith_Africa', 'Magdelene_Morse_Africa', 'Marc_Crier_Africa', 'Marc_Harrigan_Africa', 'Maria_Bertelson_Africa', 'Maria_Etezadi_Africa', 'Maria_Zettner_Africa', 'Maribeth_Dona_Africa', 'Maribeth_Schnelling_Africa', 'Maribeth_Yedwab_Africa', 'Marina_Lichtenstein_Africa', 'Mark_Cousins_Africa', 'Mark_Haberlin_Africa', 'Mark_Hamilton_Africa', 'Mark_Packer_Africa', 'Mark_Van_Huff_Africa', 'MaryBeth_Skach_Africa', \"Mary_O'Rourke_Africa\", 'Mary_Zewe_Africa', 'Mathew_Reese_Africa', 'Matt_Abelman_Africa', 'Matt_Collins_Africa', 'Matt_Collister_Africa', 'Matt_Connell_Africa', 'Matt_Hagelstein_Africa', 'Matthew_Clasen_Africa', 'Matthew_Grinstein_Africa', 'Maureen_Fritzler_Africa', 'Maureen_Gastineau_Africa', 'Maureen_Gnade_Africa', 'Maurice_Satty_Africa', 'Max_Engle_Africa', 'Max_Jones_Africa', 'Max_Ludwig_Africa', 'Maxwell_Schwartz_Africa', 'Maya_Herman_Africa', \"Meg_O'Connel_Africa\", 'Meg_Tillman_Africa', 'Melanie_Seite_Africa', 'Michael_Chen_Africa', 'Michael_Grace_Africa', 'Michael_Kennedy_Africa', 'Michael_Moore_Africa', 'Michael_Nguyen_Africa', 'Michael_Oakman_Africa', 'Michael_Paige_Africa', 'Michael_Stewart_Africa', 'Michelle_Arnett_Africa', 'Michelle_Ellison_Africa', 'Michelle_Huthwaite_Africa', 'Michelle_Lonsdale_Africa', 'Michelle_Moray_Africa', 'Michelle_Tran_Africa', 'Mick_Brown_Africa', 'Mick_Hernandez_Africa', 'Mike_Caudle_Africa', 'Mike_Gockenbach_Africa', 'Mike_Kennedy_Africa', 'Mike_Pelletier_Africa', 'Mike_Vittorini_Africa', 'Mitch_Gastineau_Africa', 'Mitch_Webber_Africa', 'Mitch_Willingham_Africa', 'Monica_Federle_Africa', 'Muhammed_Lee_Africa', 'Muhammed_MacIntyre_Africa', 'Muhammed_Yedwab_Africa', 'Nancy_Lomonaco_Africa', 'Naresj_Patel_Africa', 'Nat_Carroll_Africa', 'Nat_Gilpin_Africa', 'Natalie_DeCherney_Africa', 'Natalie_Fritzler_Africa', 'Natalie_Webber_Africa', 'Nathan_Cano_Africa', 'Nathan_Gelder_Africa', 'Nathan_Mautz_Africa', 'Neil_Ducich_Africa', 'Neil_Französisch_Africa', 'Neil_Knudson_Africa', 'Neola_Schneider_Africa', 'Nick_Crebassa_Africa', 'Nick_Radford_Africa', 'Nicole_Brennan_Africa', 'Nicole_Fjeld_Africa', 'Nicole_Hansen_Africa', 'Noah_Childs_Africa', 'Noel_Staavos_Africa', 'Nona_Balk_Africa', 'Nora_Paige_Africa', 'Nora_Pelletier_Africa', 'Nora_Preis_Africa', 'Odella_Nelson_Africa', 'Olvera_Toch_Africa', 'Pamela_Coakley_Africa', 'Pamela_Stobb_Africa', 'Parhena_Norris_Africa', 'Patricia_Hirasaki_Africa', 'Patrick_Bzostek_Africa', 'Patrick_Gardner_Africa', 'Patrick_Jones_Africa', \"Patrick_O'Brill_Africa\", \"Patrick_O'Donnell_Africa\", 'Patrick_Ryan_Africa', 'Paul_Gonzalez_Africa', 'Paul_Lucas_Africa', 'Paul_MacIntyre_Africa', 'Paul_Prost_Africa', 'Paul_Stevenson_Africa', 'Paul_Van_Hugh_Africa', 'Pauline_Chand_Africa', 'Pauline_Johnson_Africa', 'Pauline_Webber_Africa', 'Penelope_Sewall_Africa', 'Pete_Armstrong_Africa', 'Pete_Kriz_Africa', 'Pete_Takahito_Africa', 'Peter_Fuller_Africa', 'Peter_McVee_Africa', 'Philip_Brown_Africa', 'Philip_Fox_Africa', 'Philisse_Overcash_Africa', 'Phillina_Ober_Africa', 'Phillip_Breyer_Africa', 'Phillip_Flathmann_Africa', 'Pierre_Wener_Africa', 'Quincy_Jones_Africa', 'Rachel_Payne_Africa', 'Ralph_Arnett_Africa', 'Ralph_Kennedy_Africa', 'Ralph_Ritter_Africa', 'Randy_Bradley_Africa', 'Randy_Ferguson_Africa', 'Raymond_Buch_Africa', 'Raymond_Messe_Africa', 'Resi_Pölking_Africa', 'Ricardo_Emerson_Africa', 'Ricardo_Sperren_Africa', 'Richard_Bierner_Africa', 'Richard_Eichhorn_Africa', 'Rick_Bensley_Africa', 'Rick_Duston_Africa', 'Rick_Hansen_Africa', 'Rick_Huthwaite_Africa', 'Rick_Wilson_Africa', 'Ritsa_Hightower_Africa', 'Rob_Beeghly_Africa', 'Rob_Dowd_Africa', 'Rob_Haberlin_Africa', 'Rob_Lucas_Africa', 'Rob_Williams_Africa', 'Robert_Barroso_Africa', 'Robert_Dilbeck_Africa', 'Robert_Marley_Africa', 'Robert_Waldorf_Africa', 'Roger_Barcio_Africa', 'Roger_Demir_Africa', 'Roland_Murray_Africa', 'Roland_Schwarz_Africa', \"Rose_O'Brian_Africa\", 'Ross_Baird_Africa', 'Ross_DeVincentis_Africa', 'Roy_Französisch_Africa', 'Roy_Phan_Africa', 'Roy_Skaria_Africa', 'Ruben_Ausman_Africa', 'Ruben_Dartt_Africa', 'Russell_Applegate_Africa', \"Russell_D'Ascenzo_Africa\", 'Ryan_Akin_Africa', 'Ryan_Crowe_Africa', 'Sally_Hughsby_Africa', 'Sally_Knutson_Africa', 'Sally_Matthias_Africa', 'Sam_Craven_Africa', 'Sam_Zeldin_Africa', 'Sample_Company_A_Africa', 'Sandra_Flanagan_Africa', 'Sandra_Glassco_Africa', 'Sanjit_Chand_Africa', 'Sanjit_Engle_Africa', 'Sanjit_Jacobs_Africa', 'Saphhira_Shifley_Africa', 'Sara_Luxemburg_Africa', 'Sarah_Bern_Africa', 'Sarah_Brown_Africa', 'Sarah_Foster_Africa', 'Sarah_Jordon_Africa', 'Scot_Coram_Africa', 'Scot_Wooten_Africa', 'Scott_Williamson_Africa', 'Sean_Christensen_Africa', 'Sean_Miller_Africa', \"Sean_O'Donnell_Africa\", 'Sean_Wendt_Africa', 'Shahid_Collister_Africa', 'Shahid_Hopkins_Africa', 'Shahid_Shariari_Africa', 'Sharelle_Roach_Africa', 'Shaun_Chance_Africa', 'Shaun_Weien_Africa', 'Sheri_Gordon_Africa', 'Shirley_Daniels_Africa', 'Shirley_Schmidt_Africa', 'Shui_Tom_Africa', 'Sibella_Parks_Africa', 'Skye_Norling_Africa', 'Sonia_Sunley_Africa', 'Speros_Goranitis_Africa', 'Stefania_Perrino_Africa', 'Stephanie_Phelps_Africa', 'Stephanie_Ulpright_Africa', 'Steve_Carroll_Africa', 'Steve_Chapman_Africa', 'Steve_Nguyen_Africa', 'Steven_Cartwright_Africa', 'Steven_Roelle_Africa', 'Steven_Ward_Africa', 'Stewart_Carmichael_Africa', 'Stewart_Visinsky_Africa', 'Stuart_Calhoun_Africa', 'Stuart_Van_Africa', 'Sue_Ann_Reed_Africa', 'Sung_Chung_Africa', 'Sung_Pak_Africa', 'Sung_Shariari_Africa', 'Susan_Gilcrest_Africa', 'Susan_MacKendrick_Africa', 'Susan_Pistek_Africa', 'Susan_Vittorini_Africa', 'Suzanne_McNair_Africa', 'Sylvia_Foulston_Africa', 'Tamara_Chand_Africa', 'Tamara_Dahlen_Africa', 'Tamara_Manning_Africa', 'Tamara_Willingham_Africa', 'Tanja_Norvell_Africa', 'Ted_Butterfield_Africa', 'Ted_Trevino_Africa', 'Thais_Sissman_Africa', 'Thea_Hendricks_Africa', 'Thea_Hudgings_Africa', 'Theone_Pippenger_Africa', 'Theresa_Coyne_Africa', 'Theresa_Swint_Africa', 'Thomas_Boland_Africa', 'Thomas_Brumley_Africa', 'Thomas_Seio_Africa', 'Thomas_Thornton_Africa', 'Tiffany_House_Africa', 'Tim_Brockman_Africa', 'Tim_Taslimi_Africa', 'Toby_Braunhardt_Africa', 'Toby_Carlisle_Africa', 'Toby_Gnade_Africa', 'Toby_Ritter_Africa', 'Toby_Swindell_Africa', 'Todd_Boyes_Africa', 'Todd_Sumrall_Africa', 'Tom_Ashbrook_Africa', 'Tom_Boeckenhauer_Africa', 'Tom_Prescott_Africa', 'Tom_Stivers_Africa', 'Tom_Zandusky_Africa', 'Tonja_Turnell_Africa', 'Tony_Chapman_Africa', 'Tony_Molinari_Africa', 'Tony_Sayre_Africa', 'Tracy_Blumstein_Africa', 'Tracy_Collins_Africa', 'Tracy_Hopkins_Africa', 'Tracy_Poddar_Africa', 'Tracy_Zic_Africa', 'Troy_Blackwell_Africa', 'Troy_Staebel_Africa', 'Trudy_Brown_Africa', 'Trudy_Glocke_Africa', 'Trudy_Schmidt_Africa', 'Valerie_Dominguez_Africa', 'Valerie_Mitchum_Africa', 'Valerie_Takahito_Africa', 'Vicky_Freymann_Africa', 'Victor_Preis_Africa', 'Victoria_Brennan_Africa', 'Victoria_Pisteka_Africa', 'Victoria_Wilson_Africa', 'Vivek_Gonzalez_Africa', 'Vivek_Grady_Africa', 'Vivek_Sundaresam_Africa', 'Vivian_Mathis_Africa', 'William_Brown_Africa', 'Xylona_Preis_Africa', 'Yana_Sorensen_Africa', 'Yoseph_Carroll_Africa', 'Zuschuss_Carroll_Africa', 'Zuschuss_Donatelli_Africa', 'goodbye', 'greeting', 'options', 'products', 'thanks']\n931 unique lemmatized words [\"'s\", ',', '.', 'a', 'aaron', 'abelman', 'adam', 'adrian', 'airdo', 'akin', 'alan', 'alejandro', 'aleksandra', 'alex', 'alice', 'allen', 'alyssa', 'amy', 'anderson', 'andreada', 'andreadi', 'andrew', 'andy', 'anemone', 'angele', 'ann', 'anna', 'anne', 'annie', 'anthony', 'anyone', 'applegate', 'are', 'arianne', 'armold', 'armstrong', 'arnett', 'arntzen', 'art', 'arthur', 'ashbrook', 'ashley', 'astrea', 'atkinson', 'ausman', 'avila', 'awesome', 'badders', 'bailliet', 'baird', 'balk', 'ballard', 'ballentine', 'baptist', 'barbara', 'barchas', 'barcio', 'barnes', 'barnett', 'barreto', 'barroso', 'barry', 'bart', 'barton', 'be', 'becky', 'beeghly', 'bell', 'bell-', 'bellavance', 'beltran', 'ben', 'benjamin', 'benoit', 'bensley', 'berenike', 'bergman', 'bergmann', 'bern', 'bertelson', 'beth', 'bickford', 'bierner', 'bill', 'black', 'blackwell', 'blume', 'blumstein', 'bobby', 'boeckenhauer', 'boland', 'bolton', 'bowman', 'boyes', 'brad', 'braden', 'bradley', 'braun', 'braunhardt', 'braxton', 'bremer', 'brenda', 'brendan', 'brennan', 'breyer', 'brian', 'brittain', 'brockman', 'brook', 'brooke', 'brosina', 'brown', 'bruce', 'brumfield', 'brumley', 'bryan', 'buch', 'budd', 'burn', 'butterfield', 'bye', 'byrd', 'bzostek', 'cacioppo', 'caffey', 'calhoun', 'campbell', 'can', 'candace', 'cano', 'cari', 'carl', 'carlisle', 'carlos', 'carmichael', 'carol', 'caroline', 'carreira', 'carroll', 'carter', 'cartwright', 'castell', 'catherine', 'cathy', 'catini', 'caudle', 'cazamias', 'chad', 'chance', 'chand', 'chapman', 'charles', 'charlotte', 'chatting', 'cheatham', 'chen', 'child', 'chloris', 'chong', 'chris', 'christensen', 'christina', 'christine', 'christopher', 'christy', 'chuck', 'chung', 'cindy', 'claire', 'clark', 'clasen', 'claudia', 'clay', 'clytie', 'coakley', 'collins', 'collister', 'company', 'conant', 'connell', 'cool', 'coram', 'corey', 'corey-lock', 'corinna', 'cortes', 'could', 'cousin', 'cox', 'coyne', 'craig', 'craven', 'crebassa', 'creighton', 'crestani', 'crier', 'crouse', 'crowe', 'cunningham', 'currie', 'cyma', 'cynthia', 'cyra', \"d'ascenzo\", 'dahlen', 'daly', 'damala', 'dan', 'dana', 'daniel', 'dario', 'darley', 'darren', 'darrin', 'dartt', 'dave', 'david', 'davis', 'dawkins', 'day', 'dean', 'deanra', 'deborah', 'debra', 'decherney', 'degenhardt', 'deggeller', 'deirdre', 'delaney', 'delfina', 'demir', 'demo', 'denise', 'dennis', 'denny', 'derr', 'devincentis', 'dianna', 'dickinson', 'dilbeck', 'dionis', 'do', 'dodson', 'doherty', 'dominguez', 'don', 'dona', 'donatelli', 'donovan', 'dorothy', 'dorris', 'dortch', 'doug', 'dowd', 'drucker', 'dryer', 'duane', 'ducich', 'dunbar', 'duston', 'eason', 'eaton', 'ed', 'edelman', 'edward', 'eichhorn', 'eileen', 'eleni', 'elia', 'elijah', 'elizabeth', 'elli', 'ellison', 'elpida', 'emerson', 'emily', 'engle', 'eno', 'eplett', 'epp', 'eric', 'erica', 'erin', 'etezadi', 'eudokia', 'eugene', 'eva', 'evan', 'farhat', 'farry', 'federle', 'fein', 'ferguson', 'ferrer', 'filia', 'fisher', 'fjeld', 'flanagan', 'flashing', 'flathmann', 'flentye', 'folk', 'for', 'fortune-', 'foster', 'foulston', 'fox', 'frank', 'franz', 'französisch', 'frazer', 'fred', 'freymann', 'fritzler', 'fuller', 'gainer', 'galang', 'gannaway', 'gardner', 'garverick', 'gary', 'garza', 'gastineau', 'gayman', 'geld', 'gelder', 'gene', 'george', 'georgia', 'gerbode', 'gibson', 'gilcrest', 'gillingham', 'gilpin', 'giulietta', 'gjertsen', 'glantz', 'glassco', 'glocke', 'glotzbach', 'gnade', 'gockenbach', 'goldenen', 'goldwyn', 'gonzalez', 'good', 'goodbye', 'goranitis', 'gordon', 'grace', 'grady', 'grant', 'grayson', 'greene', 'greer', 'greg', 'grinstein', 'grove', 'gute', 'guthrie', 'guy', 'haberlin', 'hackney', 'hagelstein', 'haines', 'hale', 'halladay', 'hallie', 'hallsten', 'hamilton', 'hane', 'hansen', 'harm', 'harold', 'harrigan', 'harry', 'hart', 'harton', 'hastings', 'haushalter', 'hawkins', 'hawley', 'hazard', 'heather', 'heidel', 'helen', 'hello', 'help', 'helpful', 'helping', 'hendricks', 'henia', 'henry', 'herbert', 'herman', 'hernandez', 'herrera', 'hey', 'hi', 'hightower', 'hilary', 'hildebrand', 'hirasaki', 'hirsh', 'hoffman', 'hoffmann', 'hola', 'holden', 'holt', 'hood', 'hook', 'hopkins', 'house', 'how', 'howell', 'hudgings', 'huff', 'huffman', 'hugh', 'hughes', 'hughsby', 'hunt', 'hunter', 'huston', 'huthwaite', 'hwang', 'häberlin', 'ionia', 'irene', 'irving', 'is', 'ivan', 'jack', 'jackson', 'jacob', 'james', 'jamie', 'jane', 'janet', 'jarboe', 'jas', 'jason', 'jasper', 'jay', 'jenkins', 'jenna', 'jennifer', 'jeremy', 'jessica', 'jesus', 'jill', 'jim', 'jocasta', 'joe', 'joel', 'john', 'johnson', 'jonathan', 'jones', 'joni', 'jordon', 'joseph', 'joy', 'julia', 'juliana', 'julie', 'jumper', 'justin', 'kalyca', 'kamberova', 'kampe', 'kane', 'karen', 'kargatis', 'karl', 'karlsson', 'kastensmidt', 'katharine', 'katherine', 'katrina', 'katz', 'kaydos', 'kean', 'keith', 'kelly', 'kelty', 'ken', 'kendrick', 'kennedy', 'khloe', 'kiefer', 'kimberly', 'kimmel', 'kinney', 'kipp', 'kirkland', 'klamczynski', 'knudson', 'knutson', 'kotsonis', 'koutras', 'kristen', 'kristina', 'kriz', 'krohn', 'kunitz', 'lacy', 'lampkin', 'lanier', 'larry', 'latchford', 'later', 'laura', 'laurel', 'lauren', 'lawera', 'leatherbury', 'lebron', 'lee', 'leinenbach', 'lela', 'lena', 'leslie', 'let', 'lichtenstein', 'liebe', 'linda', 'lindsay', 'lisa', 'liston', 'liz', 'lloyd', 'logan', 'lomonaco', 'lonsdale', 'lopez', 'lori', 'lucas', 'ludtke', 'ludwig', 'luke', 'luxemburg', 'lycoris', 'lynn', 'macallister', 'macintyre', 'mackendrick', 'maddox', 'magdelene', 'magee', 'manning', 'marc', 'maria', 'maribeth', 'marie', 'marina', 'mark', 'marley', 'martin', 'martinez', 'mary', 'marybeth', 'mathew', 'mathis', 'matt', 'matthew', 'matthias', 'maureen', 'maurice', 'mautz', 'max', 'maxwell', 'maya', 'mcadams', 'mcafee', 'mccarthy', 'mcclure', 'mccrary', 'mccrossin', 'mcfarland', 'mcgarr', 'mcgrath', 'mcguire', 'mcmahon', 'mcmath', 'mcnair', 'mcvee', 'me', 'meade', 'meador', 'medina', 'meg', 'melanie', 'melton', 'merwin', 'messe', 'michael', 'michelle', 'mick', 'mike', 'mill', 'miller', 'minnotte', 'mitch', 'mitchell', 'mitchum', 'moffitt', 'molinari', 'monica', 'monton', 'moore', 'moray', 'moren', 'morse', 'moss', 'muhammed', 'mull', 'murdock', 'murray', 'murry', 'myrick', 'nancy', 'naresj', 'nat', 'natalie', 'nathan', 'nazzal', 'neil', 'nelson', 'neola', 'next', 'nguyen', 'nice', 'nick', 'nicole', 'noah', 'nockton', 'noel', 'nona', 'noonan', 'nora', 'norling', 'norris', 'norvell', 'nunn', \"o'brian\", \"o'briant\", \"o'brill\", \"o'connel\", \"o'connell\", \"o'donnell\", \"o'rourke\", 'oakman', 'ober', 'ocampo', 'odegard', 'odella', 'offer', 'offered', 'olsen', 'olson', 'olvera', 'ordway', 'overcash', 'overfelt', 'packer', 'paige', 'pak', 'pamela', 'pardue', 'parhena', 'park', 'patel', 'patricia', 'patrick', 'patt', 'patterson', 'paul', 'pauline', 'pawlan', 'payne', 'pelletier', 'penelope', 'percer', 'perrino', 'pete', 'peter', 'peterman', 'phan', 'phelps', 'philip', 'philippe', 'philisse', 'phillina', 'phillip', 'phonely', 'pierre', 'pippenger', 'pistek', 'pisteka', 'pistole', 'poddar', 'poirier', 'pond', 'power', 'preis', 'prescott', 'prichep', 'product', 'prost', 'provide', 'pryor', 'pölking', 'quincy', 'rachel', 'radford', 'raglin', 'ralph', 'randy', 'ratner', 'rawles', 'raymond', 'redmond', 'reed', 'reese', 'reichenbach', 'reiten', 'reiter', 'resi', 'ricardo', 'richard', 'rick', 'ritsa', 'rittenbach', 'ritter', 'roach', 'rob', 'robert', 'roelle', 'roger', 'roland', 'roper', 'rose', 'rosenberg', 'rosenblatt', 'ross', 'roy', 'rozendal', 'ruben', 'rupert', 'russell', 'ryan', 'sachs', 'sally', 'sam', 'sample', 'sandra', 'sanjit', 'saphhira', 'sara', 'sarah', 'satty', 'saunders', 'savely', 'sayre', 'schild', 'schmidt', 'schneider', 'schnelling', 'schoenberger', 'schwartz', 'schwarz', 'scot', 'scott', 'sean', 'see', 'seio', 'seite', 'selesnick', 'sewall', 'shagiari', 'shahid', 'sharelle', 'shariari', 'shaun', 'sheldon', 'sheri', 'shifley', 'shillingsburg', 'shirley', 'shonely', 'show', 'shui', 'sibella', 'sievert', 'sink', 'sissman', 'skach', 'skaria', 'skye', 'smayling', 'smith', 'soltero', 'some', 'sonia', 'sorensen', 'southworth', 'speros', 'sperren', 'spruell', 'staavos', 'staebel', 'steele', 'stefania', 'stephanie', 'steve', 'steven', 'stevenson', 'stewart', 'stivers', 'stobb', 'stuart', 'stugart', 'sue', 'sumrall', 'sundaresam', 'sung', 'sunley', 'support', 'sure', 'susan', 'suzanne', 'sweed', 'swindell', 'swint', 'sylvia', 'takahito', 'talbott', 'tamara', 'tanja', 'taslimi', 'tate', 'ted', 'thai', 'thank', 'thanks', 'that', 'the', 'thea', 'theone', 'there', 'theresa', 'thomas', 'thompson', 'thornton', 'thurman', 'tiffany', 'till', 'tillman', 'tim', 'time', 'to', 'toby', 'toch', 'todd', 'tom', 'tonja', 'tony', 'tracy', 'trafton', 'tran', 'trevino', 'tron', 'troy', 'trudy', 'turnell', 'tyler', 'ulpright', 'valerie', 'van', 'vanderzanden', 'vicky', 'victor', 'victoria', 'visinsky', 'vittorini', 'vivek', 'vivian', 'voltz', 'waco', 'waldorf', 'wallace', 'ward', 'wardle', 'wasserman', 'watters', 'webber', 'wei', 'weien', 'weimer', 'weirich', 'wendt', 'wener', 'west', 'what', 'wiediger', 'wiener', 'william', 'williams', 'williamson', 'willingham', 'willman', 'wilson', 'wooten', 'workman', 'would', 'xylona', 'yana', 'yedwab', 'yoseph', 'yotov', 'you', 'zandusky', 'zeldin', 'zettner', 'zewe', 'zic', 'zrebassa', 'zuschuss', 'zydlo', 'zypern']\n"
    }
   ],
   "source": [
    "# documents = combination between patterns and intents\n",
    "print (len(documents), \"documents\")\n",
    "# classes = intents\n",
    "print (len(classes), \"classes\", classes)\n",
    "# words = all words, vocabulary\n",
    "print (len(words), \"unique lemmatized words\", words)\n",
    "pickle.dump(words,open('words.pkl','wb'))\n",
    "pickle.dump(classes,open('classes.pkl','wb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "ca'),\n (['Jennifer', 'Ferguson'], 'Jennifer_Ferguson_Africa'),\n (['Jeremy', 'Farry'], 'Jeremy_Farry_Africa'),\n (['Jill', 'Fjeld'], 'Jill_Fjeld_Africa'),\n (['Jack', 'Garza'], 'Jack_Garza_Africa'),\n (['James', 'Galang'], 'James_Galang_Africa'),\n (['John', 'Grady'], 'John_Grady_Africa'),\n (['Jennifer', 'Halladay'], 'Jennifer_Halladay_Africa'),\n (['John', 'Huston'], 'John_Huston_Africa'),\n (['Jonathan', 'Howell'], 'Jonathan_Howell_Africa'),\n (['Joseph', 'Holt'], 'Joseph_Holt_Africa'),\n (['Justin', 'Hirsh'], 'Justin_Hirsh_Africa'),\n (['Jennifer', 'Jackson'], 'Jennifer_Jackson_Africa'),\n (['Joel', 'Jenkins'], 'Joel_Jenkins_Africa'),\n (['Jamie', 'Kunitz'], 'Jamie_Kunitz_Africa'),\n (['Jason', 'Klamczynski'], 'Jason_Klamczynski_Africa'),\n (['Jay', 'Kimmel'], 'Jay_Kimmel_Africa'),\n (['Jim', 'Karlsson'], 'Jim_Karlsson_Africa'),\n (['Jim', 'Kriz'], 'Jim_Kriz_Africa'),\n (['Joe', 'Kamberova'], 'Joe_Kamberova_Africa'),\n (['Juliana', 'Krohn'], 'Juliana_Krohn_Africa'),\n (['Julie', 'Kriz'], 'Julie_Kriz_Africa'),\n (['Jack', 'Lebron'], 'Jack_Lebron_Africa'),\n (['James', 'Lanier'], 'James_Lanier_Africa'),\n (['Jeremy', 'Lonsdale'], 'Jeremy_Lonsdale_Africa'),\n (['John', 'Lee'], 'John_Lee_Africa'),\n (['John', 'Lucas'], 'John_Lucas_Africa'),\n (['Janet', 'Martin'], 'Janet_Martin_Africa'),\n (['Janet', 'Molinari'], 'Janet_Molinari_Africa'),\n (['Jessica', 'Myrick'], 'Jessica_Myrick_Africa'),\n (['Jill', 'Matthias'], 'Jill_Matthias_Africa'),\n (['Jim', 'Mitchum'], 'Jim_Mitchum_Africa'),\n (['John', 'Murray'], 'John_Murray_Africa'),\n (['Justin', 'MacKendrick'], 'Justin_MacKendrick_Africa'),\n (['Jack', \"O'Briant\"], \"Jack_O'Briant_Africa\"),\n (['Jesus', 'Ocampo'], 'Jesus_Ocampo_Africa'),\n (['Jennifer', 'Patt'], 'Jennifer_Patt_Africa'),\n (['Jeremy', 'Pistek'], 'Jeremy_Pistek_Africa'),\n (['Julie', 'Prescott'], 'Julie_Prescott_Africa'),\n (['Jim', 'Radford'], 'Jim_Radford_Africa'),\n (['Jocasta', 'Rupert'], 'Jocasta_Rupert_Africa'),\n (['Justin', 'Ritter'], 'Justin_Ritter_Africa'),\n (['Jill', 'Stevenson'], 'Jill_Stevenson_Africa'),\n (['Jim', 'Sink'], 'Jim_Sink_Africa'),\n (['John', 'Stevenson'], 'John_Stevenson_Africa'),\n (['Joni', 'Sundaresam'], 'Joni_Sundaresam_Africa'),\n (['Joy', 'Smith'], 'Joy_Smith_Africa'),\n (['Jane', 'Waco'], 'Jane_Waco_Africa'),\n (['Joni', 'Wasserman'], 'Joni_Wasserman_Africa'),\n (['Julia', 'West'], 'Julia_West_Africa'),\n (['Kelly', 'Andreada'], 'Kelly_Andreada_Africa'),\n (['Karen', 'Bern'], 'Karen_Bern_Africa'),\n (['Karl', 'Braun'], 'Karl_Braun_Africa'),\n (['Ken', 'Brennan'], 'Ken_Brennan_Africa'),\n (['Karen', 'Carlisle'], 'Karen_Carlisle_Africa'),\n (['Kelly', 'Collister'], 'Kelly_Collister_Africa'),\n (['Kimberly', 'Carter'], 'Kimberly_Carter_Africa'),\n (['Katherine', 'Ducich'], 'Katherine_Ducich_Africa'),\n (['Keith', 'Dawkins'], 'Keith_Dawkins_Africa'),\n (['Ken', 'Dana'], 'Ken_Dana_Africa'),\n (['Katrina', 'Edelman'], 'Katrina_Edelman_Africa'),\n (['Karen', 'Ferguson'], 'Karen_Ferguson_Africa'),\n (['Katharine', 'Harms'], 'Katharine_Harms_Africa'),\n (['Katherine', 'Hughes'], 'Katherine_Hughes_Africa'),\n (['Keith', 'Herrera'], 'Keith_Herrera_Africa'),\n (['Ken', 'Heidel'], 'Ken_Heidel_Africa'),\n (['Kristen', 'Hastings'], 'Kristen_Hastings_Africa'),\n (['Kelly', 'Lampkin'], 'Kelly_Lampkin_Africa'),\n (['Ken', 'Lonsdale'], 'Ken_Lonsdale_Africa'),\n (['Kalyca', 'Meade'], 'Kalyca_Meade_Africa'),\n (['Katherine', 'Murray'], 'Katherine_Murray_Africa'),\n (['Khloe', 'Miller'], 'Khloe_Miller_Africa'),\n (['Katherine', 'Nockton'], 'Katherine_Nockton_Africa'),\n (['Kean', 'Nguyen'], 'Kean_Nguyen_Africa'),\n (['Kristina', 'Nunn'], 'Kristina_Nunn_Africa'),\n (['Karen', 'Seio'], 'Karen_Seio_Africa'),\n (['Kean', 'Takahito'], 'Kean_Takahito_Africa'),\n (['Kean', 'Thornton'], 'Kean_Thornton_Africa'),\n (['Katrina', 'Willman'], 'Katrina_Willman_Africa'),\n (['Kelly', 'Williams'], 'Kelly_Williams_Africa'),\n (['Laura', 'Armstrong'], 'Laura_Armstrong_Africa'),\n (['Larry', 'Blacks'], 'Larry_Blacks_Africa'),\n (['Laurel', 'Beltran'], 'Laurel_Beltran_Africa'),\n (['Lena', 'Cacioppo'], 'Lena_Cacioppo_Africa'),\n (['Lena', 'Creighton'], 'Lena_Creighton_Africa'),\n (['Linda', 'Cazamias'], 'Linda_Cazamias_Africa'),\n (['Lindsay', 'Castell'], 'Lindsay_Castell_Africa'),\n (['Liz', 'Carlisle'], 'Liz_Carlisle_Africa'),\n (['Logan', 'Currie'], 'Logan_Currie_Africa'),\n (['Lela', 'Donovan'], 'Lela_Donovan_Africa'),\n (['Lisa', 'DeCherney'], 'Lisa_DeCherney_Africa'),\n (['Luke', 'Foster'], 'Luke_Foster_Africa'),\n (['Larry', 'Hughes'], 'Larry_Hughes_Africa'),\n (['Lena', 'Hernandez'], 'Lena_Hernandez_Africa'),\n (['Lisa', 'Hazard'], 'Lisa_Hazard_Africa'),\n (['Logan', 'Haushalter'], 'Logan_Haushalter_Africa'),\n (['Lauren', 'Leatherbury'], 'Lauren_Leatherbury_Africa'),\n (['Liz', 'MacKendrick'], 'Liz_MacKendrick_Africa'),\n (['Lori', 'Olson'], 'Lori_Olson_Africa'),\n (['Liz', 'Pelletier'], 'Liz_Pelletier_Africa'),\n (['Liz', 'Preis'], 'Liz_Preis_Africa'),\n (['Lena', 'Radford'], 'Lena_Radford_Africa'),\n (['Lisa', 'Ryan'], 'Lisa_Ryan_Africa'),\n (['Linda', 'Southworth'], 'Linda_Southworth_Africa'),\n (['Lindsay', 'Shagiari'], 'Lindsay_Shagiari_Africa'),\n (['Lycoris', 'Saunders'], 'Lycoris_Saunders_Africa'),\n (['Lynn', 'Smith'], 'Lynn_Smith_Africa'),\n (['Larry', 'Tron'], 'Larry_Tron_Africa'),\n (['Liz', 'Thompson'], 'Liz_Thompson_Africa'),\n (['Laurel', 'Workman'], 'Laurel_Workman_Africa'),\n (['Lindsay', 'Williams'], 'Lindsay_Williams_Africa'),\n (['Liz', 'Willingham'], 'Liz_Willingham_Africa'),\n (['Luke', 'Weiss'], 'Luke_Weiss_Africa'),\n (['Matt', 'Abelman'], 'Matt_Abelman_Africa'),\n (['Michelle', 'Arnett'], 'Michelle_Arnett_Africa'),\n (['Maria', 'Bertelson'], 'Maria_Bertelson_Africa'),\n (['Mick', 'Brown'], 'Mick_Brown_Africa'),\n (['Marc', 'Crier'], 'Marc_Crier_Africa'),\n (['Mark', 'Cousins'], 'Mark_Cousins_Africa'),\n (['Matt', 'Collins'], 'Matt_Collins_Africa'),\n (['Matt', 'Collister'], 'Matt_Collister_Africa'),\n (['Matt', 'Connell'], 'Matt_Connell_Africa'),\n (['Matthew', 'Clasen'], 'Matthew_Clasen_Africa'),\n (['Michael', 'Chen'], 'Michael_Chen_Africa'),\n (['Mike', 'Caudle'], 'Mike_Caudle_Africa'),\n (['Maribeth', 'Dona'], 'Maribeth_Dona_Africa'),\n (['Maria', 'Etezadi'], 'Maria_Etezadi_Africa'),\n (['Max', 'Engle'], 'Max_Engle_Africa'),\n (['Michelle', 'Ellison'], 'Michelle_Ellison_Africa'),\n (['Maureen', 'Fritzler'], 'Maureen_Fritzler_Africa'),\n (['Monica', 'Federle'], 'Monica_Federle_Africa'),\n (['Matthew', 'Grinstein'], 'Matthew_Grinstein_Africa'),\n (['Maureen', 'Gastineau'], 'Maureen_Gastineau_Africa'),\n (['Maureen', 'Gnade'], 'Maureen_Gnade_Africa'),\n (['Michael', 'Grace'], 'Michael_Grace_Africa'),\n (['Mike', 'Gockenbach'], 'Mike_Gockenbach_Africa'),\n (['Mitch', 'Gastineau'], 'Mitch_Gastineau_Africa'),\n (['Marc', 'Harrigan'], 'Marc_Harrigan_Africa'),\n (['Mark', 'Haberlin'], 'Mark_Haberlin_Africa'),\n (['Mark', 'Hamilton'], 'Mark_Hamilton_Africa'),\n (['Matt', 'Hagelstein'], 'Matt_Hagelstein_Africa'),\n (['Maya', 'Herman'], 'Maya_Herman_Africa'),\n (['Michelle', 'Huthwaite'], 'Michelle_Huthwaite_Africa'),\n (['Mick', 'Hernandez'], 'Mick_Hernandez_Africa'),\n (['Max', 'Jones'], 'Max_Jones_Africa'),\n (['Michael', 'Kennedy'], 'Michael_Kennedy_Africa'),\n (['Mike', 'Kennedy'], 'Mike_Kennedy_Africa'),\n (['Marina', 'Lichtenstein'], 'Marina_Lichtenstein_Africa'),\n (['Max', 'Ludwig'], 'Max_Ludwig_Africa'),\n (['Michelle', 'Lonsdale'], 'Michelle_Lonsdale_Africa'),\n (['Muhammed', 'Lee'], 'Muhammed_Lee_Africa'),\n (['Magdelene', 'Morse'], 'Magdelene_Morse_Africa'),\n (['Michael', 'Moore'], 'Michael_Moore_Africa'),\n (['Michelle', 'Moray'], 'Michelle_Moray_Africa'),\n (['Muhammed', 'MacIntyre'], 'Muhammed_MacIntyre_Africa'),\n (['Michael', 'Nguyen'], 'Michael_Nguyen_Africa'),\n (['Mary', \"O'Rourke\"], \"Mary_O'Rourke_Africa\"),\n (['Meg', \"O'Connel\"], \"Meg_O'Connel_Africa\"),\n (['Michael', 'Oakman'], 'Michael_Oakman_Africa'),\n (['Mark', 'Packer'], 'Mark_Packer_Africa'),\n (['Michael', 'Paige'], 'Michael_Paige_Africa'),\n (['Mike', 'Pelletier'], 'Mike_Pelletier_Africa'),\n (['Mathew', 'Reese'], 'Mathew_Reese_Africa'),\n (['Maribeth', 'Schnelling'], 'Maribeth_Schnelling_Africa'),\n (['MaryBeth', 'Skach'], 'MaryBeth_Skach_Africa'),\n (['Maurice', 'Satty'], 'Maurice_Satty_Africa'),\n (['Maxwell', 'Schwartz'], 'Maxwell_Schwartz_Africa'),\n (['Melanie', 'Seite'], 'Melanie_Seite_Africa'),\n (['Michael', 'Stewart'], 'Michael_Stewart_Africa'),\n (['Meg', 'Tillman'], 'Meg_Tillman_Africa'),\n (['Michelle', 'Tran'], 'Michelle_Tran_Africa'),\n (['Mark', 'Van', 'Huff'], 'Mark_Van_Huff_Africa'),\n (['Mike', 'Vittorini'], 'Mike_Vittorini_Africa'),\n (['Mitch', 'Webber'], 'Mitch_Webber_Africa'),\n (['Mitch', 'Willingham'], 'Mitch_Willingham_Africa'),\n (['Maribeth', 'Yedwab'], 'Maribeth_Yedwab_Africa'),\n (['Muhammed', 'Yedwab'], 'Muhammed_Yedwab_Africa'),\n (['Maria', 'Zettner'], 'Maria_Zettner_Africa'),\n (['Mary', 'Zewe'], 'Mary_Zewe_Africa'),\n (['Nicole', 'Brennan'], 'Nicole_Brennan_Africa'),\n (['Nona', 'Balk'], 'Nona_Balk_Africa'),\n (['Nat', 'Carroll'], 'Nat_Carroll_Africa'),\n (['Nathan', 'Cano'], 'Nathan_Cano_Africa'),\n (['Nick', 'Crebassa'], 'Nick_Crebassa_Africa'),\n (['Noah', 'Childs'], 'Noah_Childs_Africa'),\n (['Natalie', 'DeCherney'], 'Natalie_DeCherney_Africa'),\n (['Neil', 'Ducich'], 'Neil_Ducich_Africa'),\n (['Natalie', 'Fritzler'], 'Natalie_Fritzler_Africa'),\n (['Neil', 'Französisch'], 'Neil_Französisch_Africa'),\n (['Nicole', 'Fjeld'], 'Nicole_Fjeld_Africa'),\n (['Nat', 'Gilpin'], 'Nat_Gilpin_Africa'),\n (['Nathan', 'Gelder'], 'Nathan_Gelder_Africa'),\n (['Nicole', 'Hansen'], 'Nicole_Hansen_Africa'),\n (['Neil', 'Knudson'], 'Neil_Knudson_Africa'),\n (['Nancy', 'Lomonaco'], 'Nancy_Lomonaco_Africa'),\n (['Nathan', 'Mautz'], 'Nathan_Mautz_Africa'),\n (['Naresj', 'Patel'], 'Naresj_Patel_Africa'),\n (['Nora', 'Paige'], 'Nora_Paige_Africa'),\n (['Nora', 'Pelletier'], 'Nora_Pelletier_Africa'),\n (['Nora', 'Preis'], 'Nora_Preis_Africa'),\n (['Nick', 'Radford'], 'Nick_Radford_Africa'),\n (['Neola', 'Schneider'], 'Neola_Schneider_Africa'),\n (['Noel', 'Staavos'], 'Noel_Staavos_Africa'),\n (['Natalie', 'Webber'], 'Natalie_Webber_Africa'),\n (['Odella', 'Nelson'], 'Odella_Nelson_Africa'),\n (['Olvera', 'Toch'], 'Olvera_Toch_Africa'),\n (['Pete', 'Armstrong'], 'Pete_Armstrong_Africa'),\n (['Patrick', 'Bzostek'], 'Patrick_Bzostek_Africa'),\n (['Philip', 'Brown'], 'Philip_Brown_Africa'),\n (['Phillip', 'Breyer'], 'Phillip_Breyer_Africa'),\n (['Pamela', 'Coakley'], 'Pamela_Coakley_Africa'),\n (['Pauline', 'Chand'], 'Pauline_Chand_Africa'),\n (['Peter', 'Fuller'], 'Peter_Fuller_Africa'),\n (['Philip', 'Fox'], 'Philip_Fox_Africa'),\n (['Phillip', 'Flathmann'], 'Phillip_Flathmann_Africa'),\n (['Patrick', 'Gardner'], 'Patrick_Gardner_Africa'),\n (['Paul', 'Gonzalez'], 'Paul_Gonzalez_Africa'),\n (['Patricia', 'Hirasaki'], 'Patricia_Hirasaki_Africa'),\n (['Patrick', 'Jones'], 'Patrick_Jones_Africa'),\n (['Pauline', 'Johnson'], 'Pauline_Johnson_Africa'),\n (['Pete', 'Kriz'], 'Pete_Kriz_Africa'),\n (['Paul', 'Lucas'], 'Paul_Lucas_Africa'),\n (['Paul', 'MacIntyre'], 'Paul_MacIntyre_Africa'),\n (['Peter', 'McVee'], 'Peter_McVee_Africa'),\n (['Parhena', 'Norris'], 'Parhena_Norris_Africa'),\n (['Patrick', \"O'Brill\"], \"Patrick_O'Brill_Africa\"),\n (['Patrick', \"O'Donnell\"], \"Patrick_O'Donnell_Africa\"),\n (['Philisse', 'Overcash'], 'Philisse_Overcash_Africa'),\n (['Phillina', 'Ober'], 'Phillina_Ober_Africa'),\n (['Paul', 'Prost'], 'Paul_Prost_Africa'),\n (['Patrick', 'Ryan'], 'Patrick_Ryan_Africa'),\n (['Pamela', 'Stobb'], 'Pamela_Stobb_Africa'),\n (['Paul', 'Stevenson'], 'Paul_Stevenson_Africa'),\n (['Penelope', 'Sewall'], 'Penelope_Sewall_Africa'),\n (['Pete', 'Takahito'], 'Pete_Takahito_Africa'),\n (['Paul', 'Van', 'Hugh'], 'Paul_Van_Hugh_Africa'),\n (['Pauline', 'Webber'], 'Pauline_Webber_Africa'),\n (['Pierre', 'Wener'], 'Pierre_Wener_Africa'),\n (['Quincy', 'Jones'], 'Quincy_Jones_Africa'),\n (['Ralph', 'Arnett'], 'Ralph_Arnett_Africa'),\n (['Ruben', 'Ausman'], 'Ruben_Ausman_Africa'),\n (['Russell', 'Applegate'], 'Russell_Applegate_Africa'),\n (['Ryan', 'Akin'], 'Ryan_Akin_Africa'),\n (['Randy', 'Bradley'], 'Randy_Bradley_Africa'),\n (['Raymond', 'Buch'], 'Raymond_Buch_Africa'),\n (['Richard', 'Bierner'], 'Richard_Bierner_Africa'),\n (['Rick', 'Bensley'], 'Rick_Bensley_Africa'),\n (['Rob', 'Beeghly'], 'Rob_Beeghly_Africa'),\n (['Robert', 'Barroso'], 'Robert_Barroso_Africa'),\n (['Roger', 'Barcio'], 'Roger_Barcio_Africa'),\n (['Ross', 'Baird'], 'Ross_Baird_Africa'),\n (['Ryan', 'Crowe'], 'Ryan_Crowe_Africa'),\n (['Rick', 'Duston'], 'Rick_Duston_Africa'),\n (['Rob', 'Dowd'], 'Rob_Dowd_Africa'),\n (['Robert', 'Dilbeck'], 'Robert_Dilbeck_Africa'),\n (['Roger', 'Demir'], 'Roger_Demir_Africa'),\n (['Ross', 'DeVincentis'], 'Ross_DeVincentis_Africa'),\n (['Ruben', 'Dartt'], 'Ruben_Dartt_Africa'),\n (['Russell', \"D'Ascenzo\"], \"Russell_D'Ascenzo_Africa\"),\n (['Ricardo', 'Emerson'], 'Ricardo_Emerson_Africa'),\n (['Richard', 'Eichhorn'], 'Richard_Eichhorn_Africa'),\n (['Randy', 'Ferguson'], 'Randy_Ferguson_Africa'),\n (['Roy', 'Französisch'], 'Roy_Französisch_Africa'),\n (['Rick', 'Hansen'], 'Rick_Hansen_Africa'),\n (['Rick', 'Huthwaite'], 'Rick_Huthwaite_Africa'),\n (['Ritsa', 'Hightower'], 'Ritsa_Hightower_Africa'),\n (['Rob', 'Haberlin'], 'Rob_Haberlin_Africa'),\n (['Ralph', 'Kennedy'], 'Ralph_Kennedy_Africa'),\n (['Rob', 'Lucas'], 'Rob_Lucas_Africa'),\n (['Raymond', 'Messe'], 'Raymond_Messe_Africa'),\n (['Robert', 'Marley'], 'Robert_Marley_Africa'),\n (['Roland', 'Murray'], 'Roland_Murray_Africa'),\n (['Rose', \"O'Brian\"], \"Rose_O'Brian_Africa\"),\n (['Rachel', 'Payne'], 'Rachel_Payne_Africa'),\n (['Resi', 'Pölking'], 'Resi_Pölking_Africa'),\n (['Roy', 'Phan'], 'Roy_Phan_Africa'),\n (['Ralph', 'Ritter'], 'Ralph_Ritter_Africa'),\n (['Ricardo', 'Sperren'], 'Ricardo_Sperren_Africa'),\n (['Roland', 'Schwarz'], 'Roland_Schwarz_Africa'),\n (['Roy', 'Skaria'], 'Roy_Skaria_Africa'),\n (['Rick', 'Wilson'], 'Rick_Wilson_Africa'),\n (['Rob', 'Williams'], 'Rob_Williams_Africa'),\n (['Robert', 'Waldorf'], 'Robert_Waldorf_Africa'),\n (['Sue', 'Ann', 'Reed'], 'Sue_Ann_Reed_Africa'),\n (['Sarah', 'Bern'], 'Sarah_Bern_Africa'),\n (['Sarah', 'Brown'], 'Sarah_Brown_Africa'),\n (['Sam', 'Craven'], 'Sam_Craven_Africa'),\n (['Sample', 'Company', 'A'], 'Sample_Company_A_Africa'),\n (['Sanjit', 'Chand'], 'Sanjit_Chand_Africa'),\n (['Scot', 'Coram'], 'Scot_Coram_Africa'),\n (['Sean', 'Christensen'], 'Sean_Christensen_Africa'),\n (['Shahid', 'Collister'], 'Shahid_Collister_Africa'),\n (['Shaun', 'Chance'], 'Shaun_Chance_Africa'),\n (['Steve', 'Carroll'], 'Steve_Carroll_Africa'),\n (['Steve', 'Chapman'], 'Steve_Chapman_Africa'),\n (['Steven', 'Cartwright'], 'Steven_Cartwright_Africa'),\n (['Stewart', 'Carmichael'], 'Stewart_Carmichael_Africa'),\n (['Stuart', 'Calhoun'], 'Stuart_Calhoun_Africa'),\n (['Sung', 'Chung'], 'Sung_Chung_Africa'),\n (['Shirley', 'Daniels'], 'Shirley_Daniels_Africa'),\n (['Sanjit', 'Engle'], 'Sanjit_Engle_Africa'),\n (['Sandra', 'Flanagan'], 'Sandra_Flanagan_Africa'),\n (['Sarah', 'Foster'], 'Sarah_Foster_Africa'),\n (['Sylvia', 'Foulston'], 'Sylvia_Foulston_Africa'),\n (['Sandra', 'Glassco'], 'Sandra_Glassco_Africa'),\n (['Sheri', 'Gordon'], 'Sheri_Gordon_Africa'),\n (['Speros', 'Goranitis'], 'Speros_Goranitis_Africa'),\n (['Susan', 'Gilcrest'], 'Susan_Gilcrest_Africa'),\n (['Shahid', 'Hopkins'], 'Shahid_Hopkins_Africa'),\n (['Sally', 'Hughsby'], 'Sally_Hughsby_Africa'),\n (['Sanjit', 'Jacobs'], 'Sanjit_Jacobs_Africa'),\n (['Sarah', 'Jordon'], 'Sarah_Jordon_Africa'),\n (['Sally', 'Knutson'], 'Sally_Knutson_Africa'),\n (['Sara', 'Luxemburg'], 'Sara_Luxemburg_Africa'),\n (['Sally', 'Matthias'], 'Sally_Matthias_Africa'),\n (['Sean', 'Miller'], 'Sean_Miller_Africa'),\n (['Susan', 'MacKendrick'], 'Susan_MacKendrick_Africa'),\n (['Suzanne', 'McNair'], 'Suzanne_McNair_Africa'),\n (['Skye', 'Norling'], 'Skye_Norling_Africa'),\n (['Steve', 'Nguyen'], 'Steve_Nguyen_Africa'),\n (['Sean', \"O'Donnell\"], \"Sean_O'Donnell_Africa\"),\n (['Sibella', 'Parks'], 'Sibella_Parks_Africa'),\n (['Stefania', 'Perrino'], 'Stefania_Perrino_Africa'),\n (['Stephanie', 'Phelps'], 'Stephanie_Phelps_Africa'),\n (['Sung', 'Pak'], 'Sung_Pak_Africa'),\n (['Susan', 'Pistek'], 'Susan_Pistek_Africa'),\n (['Sharelle', 'Roach'], 'Sharelle_Roach_Africa'),\n (['Steven', 'Roelle'], 'Steven_Roelle_Africa'),\n (['Saphhira', 'Shifley'], 'Saphhira_Shifley_Africa'),\n (['Shahid', 'Shariari'], 'Shahid_Shariari_Africa'),\n (['Shirley', 'Schmidt'], 'Shirley_Schmidt_Africa'),\n (['Sonia', 'Sunley'], 'Sonia_Sunley_Africa'),\n (['Sung', 'Shariari'], 'Sung_Shariari_Africa'),\n (['Shui', 'Tom'], 'Shui_Tom_Africa'),\n (['Stephanie', 'Ulpright'], 'Stephanie_Ulpright_Africa'),\n (['Stewart', 'Visinsky'], 'Stewart_Visinsky_Africa'),\n (['Stuart', 'Van'], 'Stuart_Van_Africa'),\n (['Susan', 'Vittorini'], 'Susan_Vittorini_Africa'),\n (['Scot', 'Wooten'], 'Scot_Wooten_Africa'),\n (['Scott', 'Williamson'], 'Scott_Williamson_Africa'),\n (['Sean', 'Wendt'], 'Sean_Wendt_Africa'),\n (['Shaun', 'Weien'], 'Shaun_Weien_Africa'),\n (['Steven', 'Ward'], 'Steven_Ward_Africa'),\n (['Sam', 'Zeldin'], 'Sam_Zeldin_Africa'),\n (['Tom', 'Ashbrook'], 'Tom_Ashbrook_Africa'),\n (['Ted', 'Butterfield'], 'Ted_Butterfield_Africa'),\n (['Thomas', 'Boland'], 'Thomas_Boland_Africa'),\n (['Thomas', 'Brumley'], 'Thomas_Brumley_Africa'),\n (['Tim', 'Brockman'], 'Tim_Brockman_Africa'),\n (['Toby', 'Braunhardt'], 'Toby_Braunhardt_Africa'),\n (['Todd', 'Boyes'], 'Todd_Boyes_Africa'),\n (['Tom', 'Boeckenhauer'], 'Tom_Boeckenhauer_Africa'),\n (['Tracy', 'Blumstein'], 'Tracy_Blumstein_Africa'),\n (['Troy', 'Blackwell'], 'Troy_Blackwell_Africa'),\n (['Trudy', 'Brown'], 'Trudy_Brown_Africa'),\n (['Tamara', 'Chand'], 'Tamara_Chand_Africa'),\n (['Theresa', 'Coyne'], 'Theresa_Coyne_Africa'),\n (['Toby', 'Carlisle'], 'Toby_Carlisle_Africa'),\n (['Tony', 'Chapman'], 'Tony_Chapman_Africa'),\n (['Tracy', 'Collins'], 'Tracy_Collins_Africa'),\n (['Tamara', 'Dahlen'], 'Tamara_Dahlen_Africa'),\n (['Toby', 'Gnade'], 'Toby_Gnade_Africa'),\n (['Trudy', 'Glocke'], 'Trudy_Glocke_Africa'),\n (['Thea', 'Hendricks'], 'Thea_Hendricks_Africa'),\n (['Thea', 'Hudgings'], 'Thea_Hudgings_Africa'),\n (['Tiffany', 'House'], 'Tiffany_House_Africa'),\n (['Tracy', 'Hopkins'], 'Tracy_Hopkins_Africa'),\n (['Tamara', 'Manning'], 'Tamara_Manning_Africa'),\n (['Tony', 'Molinari'], 'Tony_Molinari_Africa'),\n (['Tanja', 'Norvell'], 'Tanja_Norvell_Africa'),\n (['Theone', 'Pippenger'], 'Theone_Pippenger_Africa'),\n (['Tom', 'Prescott'], 'Tom_Prescott_Africa'),\n (['Tracy', 'Poddar'], 'Tracy_Poddar_Africa'),\n (['Toby', 'Ritter'], 'Toby_Ritter_Africa'),\n (['Thais', 'Sissman'], 'Thais_Sissman_Africa'),\n (['Theresa', 'Swint'], 'Theresa_Swint_Africa'),\n (['Thomas', 'Seio'], 'Thomas_Seio_Africa'),\n (['Toby', 'Swindell'], 'Toby_Swindell_Africa'),\n (['Todd', 'Sumrall'], 'Todd_Sumrall_Africa'),\n (['Tom', 'Stivers'], 'Tom_Stivers_Africa'),\n (['Tony', 'Sayre'], 'Tony_Sayre_Africa'),\n (['Troy', 'Staebel'], 'Troy_Staebel_Africa'),\n (['Trudy', 'Schmidt'], 'Trudy_Schmidt_Africa'),\n (['Ted', 'Trevino'], 'Ted_Trevino_Africa'),\n (['Thomas', 'Thornton'], 'Thomas_Thornton_Africa'),\n (['Tim', 'Taslimi'], 'Tim_Taslimi_Africa'),\n (['Tonja', 'Turnell'], 'Tonja_Turnell_Africa'),\n (['Tamara', 'Willingham'], 'Tamara_Willingham_Africa'),\n (['Tom', 'Zandusky'], 'Tom_Zandusky_Africa'),\n (['Tracy', 'Zic'], 'Tracy_Zic_Africa'),\n (['Victoria', 'Brennan'], 'Victoria_Brennan_Africa'),\n (['Valerie', 'Dominguez'], 'Valerie_Dominguez_Africa'),\n (['Vicky', 'Freymann'], 'Vicky_Freymann_Africa'),\n (['Vivek', 'Gonzalez'], 'Vivek_Gonzalez_Africa'),\n (['Vivek', 'Grady'], 'Vivek_Grady_Africa'),\n (['Valerie', 'Mitchum'], 'Valerie_Mitchum_Africa'),\n (['Vivian', 'Mathis'], 'Vivian_Mathis_Africa'),\n (['Victor', 'Preis'], 'Victor_Preis_Africa'),\n (['Victoria', 'Pisteka'], 'Victoria_Pisteka_Africa'),\n (['Vivek', 'Sundaresam'], 'Vivek_Sundaresam_Africa'),\n (['Valerie', 'Takahito'], 'Valerie_Takahito_Africa'),\n (['Victoria', 'Wilson'], 'Victoria_Wilson_Africa'),\n (['William', 'Brown'], 'William_Brown_Africa'),\n (['Xylona', 'Preis'], 'Xylona_Preis_Africa'),\n (['Yoseph', 'Carroll'], 'Yoseph_Carroll_Africa'),\n (['Yana', 'Sorensen'], 'Yana_Sorensen_Africa'),\n (['Zuschuss', 'Carroll'], 'Zuschuss_Carroll_Africa'),\n (['Zuschuss', 'Donatelli'], 'Zuschuss_Donatelli_Africa')]"
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "documents"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create training and testing data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we will create the training data in which we will provide the input and the output. Our input will be the pattern and output will be the class our input pattern belongs to. But the computer doesn’t understand text so we will convert text into numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "ca'),\n (['Jennifer', 'Ferguson'], 'Jennifer_Ferguson_Africa'),\n (['Jeremy', 'Farry'], 'Jeremy_Farry_Africa'),\n (['Jill', 'Fjeld'], 'Jill_Fjeld_Africa'),\n (['Jack', 'Garza'], 'Jack_Garza_Africa'),\n (['James', 'Galang'], 'James_Galang_Africa'),\n (['John', 'Grady'], 'John_Grady_Africa'),\n (['Jennifer', 'Halladay'], 'Jennifer_Halladay_Africa'),\n (['John', 'Huston'], 'John_Huston_Africa'),\n (['Jonathan', 'Howell'], 'Jonathan_Howell_Africa'),\n (['Joseph', 'Holt'], 'Joseph_Holt_Africa'),\n (['Justin', 'Hirsh'], 'Justin_Hirsh_Africa'),\n (['Jennifer', 'Jackson'], 'Jennifer_Jackson_Africa'),\n (['Joel', 'Jenkins'], 'Joel_Jenkins_Africa'),\n (['Jamie', 'Kunitz'], 'Jamie_Kunitz_Africa'),\n (['Jason', 'Klamczynski'], 'Jason_Klamczynski_Africa'),\n (['Jay', 'Kimmel'], 'Jay_Kimmel_Africa'),\n (['Jim', 'Karlsson'], 'Jim_Karlsson_Africa'),\n (['Jim', 'Kriz'], 'Jim_Kriz_Africa'),\n (['Joe', 'Kamberova'], 'Joe_Kamberova_Africa'),\n (['Juliana', 'Krohn'], 'Juliana_Krohn_Africa'),\n (['Julie', 'Kriz'], 'Julie_Kriz_Africa'),\n (['Jack', 'Lebron'], 'Jack_Lebron_Africa'),\n (['James', 'Lanier'], 'James_Lanier_Africa'),\n (['Jeremy', 'Lonsdale'], 'Jeremy_Lonsdale_Africa'),\n (['John', 'Lee'], 'John_Lee_Africa'),\n (['John', 'Lucas'], 'John_Lucas_Africa'),\n (['Janet', 'Martin'], 'Janet_Martin_Africa'),\n (['Janet', 'Molinari'], 'Janet_Molinari_Africa'),\n (['Jessica', 'Myrick'], 'Jessica_Myrick_Africa'),\n (['Jill', 'Matthias'], 'Jill_Matthias_Africa'),\n (['Jim', 'Mitchum'], 'Jim_Mitchum_Africa'),\n (['John', 'Murray'], 'John_Murray_Africa'),\n (['Justin', 'MacKendrick'], 'Justin_MacKendrick_Africa'),\n (['Jack', \"O'Briant\"], \"Jack_O'Briant_Africa\"),\n (['Jesus', 'Ocampo'], 'Jesus_Ocampo_Africa'),\n (['Jennifer', 'Patt'], 'Jennifer_Patt_Africa'),\n (['Jeremy', 'Pistek'], 'Jeremy_Pistek_Africa'),\n (['Julie', 'Prescott'], 'Julie_Prescott_Africa'),\n (['Jim', 'Radford'], 'Jim_Radford_Africa'),\n (['Jocasta', 'Rupert'], 'Jocasta_Rupert_Africa'),\n (['Justin', 'Ritter'], 'Justin_Ritter_Africa'),\n (['Jill', 'Stevenson'], 'Jill_Stevenson_Africa'),\n (['Jim', 'Sink'], 'Jim_Sink_Africa'),\n (['John', 'Stevenson'], 'John_Stevenson_Africa'),\n (['Joni', 'Sundaresam'], 'Joni_Sundaresam_Africa'),\n (['Joy', 'Smith'], 'Joy_Smith_Africa'),\n (['Jane', 'Waco'], 'Jane_Waco_Africa'),\n (['Joni', 'Wasserman'], 'Joni_Wasserman_Africa'),\n (['Julia', 'West'], 'Julia_West_Africa'),\n (['Kelly', 'Andreada'], 'Kelly_Andreada_Africa'),\n (['Karen', 'Bern'], 'Karen_Bern_Africa'),\n (['Karl', 'Braun'], 'Karl_Braun_Africa'),\n (['Ken', 'Brennan'], 'Ken_Brennan_Africa'),\n (['Karen', 'Carlisle'], 'Karen_Carlisle_Africa'),\n (['Kelly', 'Collister'], 'Kelly_Collister_Africa'),\n (['Kimberly', 'Carter'], 'Kimberly_Carter_Africa'),\n (['Katherine', 'Ducich'], 'Katherine_Ducich_Africa'),\n (['Keith', 'Dawkins'], 'Keith_Dawkins_Africa'),\n (['Ken', 'Dana'], 'Ken_Dana_Africa'),\n (['Katrina', 'Edelman'], 'Katrina_Edelman_Africa'),\n (['Karen', 'Ferguson'], 'Karen_Ferguson_Africa'),\n (['Katharine', 'Harms'], 'Katharine_Harms_Africa'),\n (['Katherine', 'Hughes'], 'Katherine_Hughes_Africa'),\n (['Keith', 'Herrera'], 'Keith_Herrera_Africa'),\n (['Ken', 'Heidel'], 'Ken_Heidel_Africa'),\n (['Kristen', 'Hastings'], 'Kristen_Hastings_Africa'),\n (['Kelly', 'Lampkin'], 'Kelly_Lampkin_Africa'),\n (['Ken', 'Lonsdale'], 'Ken_Lonsdale_Africa'),\n (['Kalyca', 'Meade'], 'Kalyca_Meade_Africa'),\n (['Katherine', 'Murray'], 'Katherine_Murray_Africa'),\n (['Khloe', 'Miller'], 'Khloe_Miller_Africa'),\n (['Katherine', 'Nockton'], 'Katherine_Nockton_Africa'),\n (['Kean', 'Nguyen'], 'Kean_Nguyen_Africa'),\n (['Kristina', 'Nunn'], 'Kristina_Nunn_Africa'),\n (['Karen', 'Seio'], 'Karen_Seio_Africa'),\n (['Kean', 'Takahito'], 'Kean_Takahito_Africa'),\n (['Kean', 'Thornton'], 'Kean_Thornton_Africa'),\n (['Katrina', 'Willman'], 'Katrina_Willman_Africa'),\n (['Kelly', 'Williams'], 'Kelly_Williams_Africa'),\n (['Laura', 'Armstrong'], 'Laura_Armstrong_Africa'),\n (['Larry', 'Blacks'], 'Larry_Blacks_Africa'),\n (['Laurel', 'Beltran'], 'Laurel_Beltran_Africa'),\n (['Lena', 'Cacioppo'], 'Lena_Cacioppo_Africa'),\n (['Lena', 'Creighton'], 'Lena_Creighton_Africa'),\n (['Linda', 'Cazamias'], 'Linda_Cazamias_Africa'),\n (['Lindsay', 'Castell'], 'Lindsay_Castell_Africa'),\n (['Liz', 'Carlisle'], 'Liz_Carlisle_Africa'),\n (['Logan', 'Currie'], 'Logan_Currie_Africa'),\n (['Lela', 'Donovan'], 'Lela_Donovan_Africa'),\n (['Lisa', 'DeCherney'], 'Lisa_DeCherney_Africa'),\n (['Luke', 'Foster'], 'Luke_Foster_Africa'),\n (['Larry', 'Hughes'], 'Larry_Hughes_Africa'),\n (['Lena', 'Hernandez'], 'Lena_Hernandez_Africa'),\n (['Lisa', 'Hazard'], 'Lisa_Hazard_Africa'),\n (['Logan', 'Haushalter'], 'Logan_Haushalter_Africa'),\n (['Lauren', 'Leatherbury'], 'Lauren_Leatherbury_Africa'),\n (['Liz', 'MacKendrick'], 'Liz_MacKendrick_Africa'),\n (['Lori', 'Olson'], 'Lori_Olson_Africa'),\n (['Liz', 'Pelletier'], 'Liz_Pelletier_Africa'),\n (['Liz', 'Preis'], 'Liz_Preis_Africa'),\n (['Lena', 'Radford'], 'Lena_Radford_Africa'),\n (['Lisa', 'Ryan'], 'Lisa_Ryan_Africa'),\n (['Linda', 'Southworth'], 'Linda_Southworth_Africa'),\n (['Lindsay', 'Shagiari'], 'Lindsay_Shagiari_Africa'),\n (['Lycoris', 'Saunders'], 'Lycoris_Saunders_Africa'),\n (['Lynn', 'Smith'], 'Lynn_Smith_Africa'),\n (['Larry', 'Tron'], 'Larry_Tron_Africa'),\n (['Liz', 'Thompson'], 'Liz_Thompson_Africa'),\n (['Laurel', 'Workman'], 'Laurel_Workman_Africa'),\n (['Lindsay', 'Williams'], 'Lindsay_Williams_Africa'),\n (['Liz', 'Willingham'], 'Liz_Willingham_Africa'),\n (['Luke', 'Weiss'], 'Luke_Weiss_Africa'),\n (['Matt', 'Abelman'], 'Matt_Abelman_Africa'),\n (['Michelle', 'Arnett'], 'Michelle_Arnett_Africa'),\n (['Maria', 'Bertelson'], 'Maria_Bertelson_Africa'),\n (['Mick', 'Brown'], 'Mick_Brown_Africa'),\n (['Marc', 'Crier'], 'Marc_Crier_Africa'),\n (['Mark', 'Cousins'], 'Mark_Cousins_Africa'),\n (['Matt', 'Collins'], 'Matt_Collins_Africa'),\n (['Matt', 'Collister'], 'Matt_Collister_Africa'),\n (['Matt', 'Connell'], 'Matt_Connell_Africa'),\n (['Matthew', 'Clasen'], 'Matthew_Clasen_Africa'),\n (['Michael', 'Chen'], 'Michael_Chen_Africa'),\n (['Mike', 'Caudle'], 'Mike_Caudle_Africa'),\n (['Maribeth', 'Dona'], 'Maribeth_Dona_Africa'),\n (['Maria', 'Etezadi'], 'Maria_Etezadi_Africa'),\n (['Max', 'Engle'], 'Max_Engle_Africa'),\n (['Michelle', 'Ellison'], 'Michelle_Ellison_Africa'),\n (['Maureen', 'Fritzler'], 'Maureen_Fritzler_Africa'),\n (['Monica', 'Federle'], 'Monica_Federle_Africa'),\n (['Matthew', 'Grinstein'], 'Matthew_Grinstein_Africa'),\n (['Maureen', 'Gastineau'], 'Maureen_Gastineau_Africa'),\n (['Maureen', 'Gnade'], 'Maureen_Gnade_Africa'),\n (['Michael', 'Grace'], 'Michael_Grace_Africa'),\n (['Mike', 'Gockenbach'], 'Mike_Gockenbach_Africa'),\n (['Mitch', 'Gastineau'], 'Mitch_Gastineau_Africa'),\n (['Marc', 'Harrigan'], 'Marc_Harrigan_Africa'),\n (['Mark', 'Haberlin'], 'Mark_Haberlin_Africa'),\n (['Mark', 'Hamilton'], 'Mark_Hamilton_Africa'),\n (['Matt', 'Hagelstein'], 'Matt_Hagelstein_Africa'),\n (['Maya', 'Herman'], 'Maya_Herman_Africa'),\n (['Michelle', 'Huthwaite'], 'Michelle_Huthwaite_Africa'),\n (['Mick', 'Hernandez'], 'Mick_Hernandez_Africa'),\n (['Max', 'Jones'], 'Max_Jones_Africa'),\n (['Michael', 'Kennedy'], 'Michael_Kennedy_Africa'),\n (['Mike', 'Kennedy'], 'Mike_Kennedy_Africa'),\n (['Marina', 'Lichtenstein'], 'Marina_Lichtenstein_Africa'),\n (['Max', 'Ludwig'], 'Max_Ludwig_Africa'),\n (['Michelle', 'Lonsdale'], 'Michelle_Lonsdale_Africa'),\n (['Muhammed', 'Lee'], 'Muhammed_Lee_Africa'),\n (['Magdelene', 'Morse'], 'Magdelene_Morse_Africa'),\n (['Michael', 'Moore'], 'Michael_Moore_Africa'),\n (['Michelle', 'Moray'], 'Michelle_Moray_Africa'),\n (['Muhammed', 'MacIntyre'], 'Muhammed_MacIntyre_Africa'),\n (['Michael', 'Nguyen'], 'Michael_Nguyen_Africa'),\n (['Mary', \"O'Rourke\"], \"Mary_O'Rourke_Africa\"),\n (['Meg', \"O'Connel\"], \"Meg_O'Connel_Africa\"),\n (['Michael', 'Oakman'], 'Michael_Oakman_Africa'),\n (['Mark', 'Packer'], 'Mark_Packer_Africa'),\n (['Michael', 'Paige'], 'Michael_Paige_Africa'),\n (['Mike', 'Pelletier'], 'Mike_Pelletier_Africa'),\n (['Mathew', 'Reese'], 'Mathew_Reese_Africa'),\n (['Maribeth', 'Schnelling'], 'Maribeth_Schnelling_Africa'),\n (['MaryBeth', 'Skach'], 'MaryBeth_Skach_Africa'),\n (['Maurice', 'Satty'], 'Maurice_Satty_Africa'),\n (['Maxwell', 'Schwartz'], 'Maxwell_Schwartz_Africa'),\n (['Melanie', 'Seite'], 'Melanie_Seite_Africa'),\n (['Michael', 'Stewart'], 'Michael_Stewart_Africa'),\n (['Meg', 'Tillman'], 'Meg_Tillman_Africa'),\n (['Michelle', 'Tran'], 'Michelle_Tran_Africa'),\n (['Mark', 'Van', 'Huff'], 'Mark_Van_Huff_Africa'),\n (['Mike', 'Vittorini'], 'Mike_Vittorini_Africa'),\n (['Mitch', 'Webber'], 'Mitch_Webber_Africa'),\n (['Mitch', 'Willingham'], 'Mitch_Willingham_Africa'),\n (['Maribeth', 'Yedwab'], 'Maribeth_Yedwab_Africa'),\n (['Muhammed', 'Yedwab'], 'Muhammed_Yedwab_Africa'),\n (['Maria', 'Zettner'], 'Maria_Zettner_Africa'),\n (['Mary', 'Zewe'], 'Mary_Zewe_Africa'),\n (['Nicole', 'Brennan'], 'Nicole_Brennan_Africa'),\n (['Nona', 'Balk'], 'Nona_Balk_Africa'),\n (['Nat', 'Carroll'], 'Nat_Carroll_Africa'),\n (['Nathan', 'Cano'], 'Nathan_Cano_Africa'),\n (['Nick', 'Crebassa'], 'Nick_Crebassa_Africa'),\n (['Noah', 'Childs'], 'Noah_Childs_Africa'),\n (['Natalie', 'DeCherney'], 'Natalie_DeCherney_Africa'),\n (['Neil', 'Ducich'], 'Neil_Ducich_Africa'),\n (['Natalie', 'Fritzler'], 'Natalie_Fritzler_Africa'),\n (['Neil', 'Französisch'], 'Neil_Französisch_Africa'),\n (['Nicole', 'Fjeld'], 'Nicole_Fjeld_Africa'),\n (['Nat', 'Gilpin'], 'Nat_Gilpin_Africa'),\n (['Nathan', 'Gelder'], 'Nathan_Gelder_Africa'),\n (['Nicole', 'Hansen'], 'Nicole_Hansen_Africa'),\n (['Neil', 'Knudson'], 'Neil_Knudson_Africa'),\n (['Nancy', 'Lomonaco'], 'Nancy_Lomonaco_Africa'),\n (['Nathan', 'Mautz'], 'Nathan_Mautz_Africa'),\n (['Naresj', 'Patel'], 'Naresj_Patel_Africa'),\n (['Nora', 'Paige'], 'Nora_Paige_Africa'),\n (['Nora', 'Pelletier'], 'Nora_Pelletier_Africa'),\n (['Nora', 'Preis'], 'Nora_Preis_Africa'),\n (['Nick', 'Radford'], 'Nick_Radford_Africa'),\n (['Neola', 'Schneider'], 'Neola_Schneider_Africa'),\n (['Noel', 'Staavos'], 'Noel_Staavos_Africa'),\n (['Natalie', 'Webber'], 'Natalie_Webber_Africa'),\n (['Odella', 'Nelson'], 'Odella_Nelson_Africa'),\n (['Olvera', 'Toch'], 'Olvera_Toch_Africa'),\n (['Pete', 'Armstrong'], 'Pete_Armstrong_Africa'),\n (['Patrick', 'Bzostek'], 'Patrick_Bzostek_Africa'),\n (['Philip', 'Brown'], 'Philip_Brown_Africa'),\n (['Phillip', 'Breyer'], 'Phillip_Breyer_Africa'),\n (['Pamela', 'Coakley'], 'Pamela_Coakley_Africa'),\n (['Pauline', 'Chand'], 'Pauline_Chand_Africa'),\n (['Peter', 'Fuller'], 'Peter_Fuller_Africa'),\n (['Philip', 'Fox'], 'Philip_Fox_Africa'),\n (['Phillip', 'Flathmann'], 'Phillip_Flathmann_Africa'),\n (['Patrick', 'Gardner'], 'Patrick_Gardner_Africa'),\n (['Paul', 'Gonzalez'], 'Paul_Gonzalez_Africa'),\n (['Patricia', 'Hirasaki'], 'Patricia_Hirasaki_Africa'),\n (['Patrick', 'Jones'], 'Patrick_Jones_Africa'),\n (['Pauline', 'Johnson'], 'Pauline_Johnson_Africa'),\n (['Pete', 'Kriz'], 'Pete_Kriz_Africa'),\n (['Paul', 'Lucas'], 'Paul_Lucas_Africa'),\n (['Paul', 'MacIntyre'], 'Paul_MacIntyre_Africa'),\n (['Peter', 'McVee'], 'Peter_McVee_Africa'),\n (['Parhena', 'Norris'], 'Parhena_Norris_Africa'),\n (['Patrick', \"O'Brill\"], \"Patrick_O'Brill_Africa\"),\n (['Patrick', \"O'Donnell\"], \"Patrick_O'Donnell_Africa\"),\n (['Philisse', 'Overcash'], 'Philisse_Overcash_Africa'),\n (['Phillina', 'Ober'], 'Phillina_Ober_Africa'),\n (['Paul', 'Prost'], 'Paul_Prost_Africa'),\n (['Patrick', 'Ryan'], 'Patrick_Ryan_Africa'),\n (['Pamela', 'Stobb'], 'Pamela_Stobb_Africa'),\n (['Paul', 'Stevenson'], 'Paul_Stevenson_Africa'),\n (['Penelope', 'Sewall'], 'Penelope_Sewall_Africa'),\n (['Pete', 'Takahito'], 'Pete_Takahito_Africa'),\n (['Paul', 'Van', 'Hugh'], 'Paul_Van_Hugh_Africa'),\n (['Pauline', 'Webber'], 'Pauline_Webber_Africa'),\n (['Pierre', 'Wener'], 'Pierre_Wener_Africa'),\n (['Quincy', 'Jones'], 'Quincy_Jones_Africa'),\n (['Ralph', 'Arnett'], 'Ralph_Arnett_Africa'),\n (['Ruben', 'Ausman'], 'Ruben_Ausman_Africa'),\n (['Russell', 'Applegate'], 'Russell_Applegate_Africa'),\n (['Ryan', 'Akin'], 'Ryan_Akin_Africa'),\n (['Randy', 'Bradley'], 'Randy_Bradley_Africa'),\n (['Raymond', 'Buch'], 'Raymond_Buch_Africa'),\n (['Richard', 'Bierner'], 'Richard_Bierner_Africa'),\n (['Rick', 'Bensley'], 'Rick_Bensley_Africa'),\n (['Rob', 'Beeghly'], 'Rob_Beeghly_Africa'),\n (['Robert', 'Barroso'], 'Robert_Barroso_Africa'),\n (['Roger', 'Barcio'], 'Roger_Barcio_Africa'),\n (['Ross', 'Baird'], 'Ross_Baird_Africa'),\n (['Ryan', 'Crowe'], 'Ryan_Crowe_Africa'),\n (['Rick', 'Duston'], 'Rick_Duston_Africa'),\n (['Rob', 'Dowd'], 'Rob_Dowd_Africa'),\n (['Robert', 'Dilbeck'], 'Robert_Dilbeck_Africa'),\n (['Roger', 'Demir'], 'Roger_Demir_Africa'),\n (['Ross', 'DeVincentis'], 'Ross_DeVincentis_Africa'),\n (['Ruben', 'Dartt'], 'Ruben_Dartt_Africa'),\n (['Russell', \"D'Ascenzo\"], \"Russell_D'Ascenzo_Africa\"),\n (['Ricardo', 'Emerson'], 'Ricardo_Emerson_Africa'),\n (['Richard', 'Eichhorn'], 'Richard_Eichhorn_Africa'),\n (['Randy', 'Ferguson'], 'Randy_Ferguson_Africa'),\n (['Roy', 'Französisch'], 'Roy_Französisch_Africa'),\n (['Rick', 'Hansen'], 'Rick_Hansen_Africa'),\n (['Rick', 'Huthwaite'], 'Rick_Huthwaite_Africa'),\n (['Ritsa', 'Hightower'], 'Ritsa_Hightower_Africa'),\n (['Rob', 'Haberlin'], 'Rob_Haberlin_Africa'),\n (['Ralph', 'Kennedy'], 'Ralph_Kennedy_Africa'),\n (['Rob', 'Lucas'], 'Rob_Lucas_Africa'),\n (['Raymond', 'Messe'], 'Raymond_Messe_Africa'),\n (['Robert', 'Marley'], 'Robert_Marley_Africa'),\n (['Roland', 'Murray'], 'Roland_Murray_Africa'),\n (['Rose', \"O'Brian\"], \"Rose_O'Brian_Africa\"),\n (['Rachel', 'Payne'], 'Rachel_Payne_Africa'),\n (['Resi', 'Pölking'], 'Resi_Pölking_Africa'),\n (['Roy', 'Phan'], 'Roy_Phan_Africa'),\n (['Ralph', 'Ritter'], 'Ralph_Ritter_Africa'),\n (['Ricardo', 'Sperren'], 'Ricardo_Sperren_Africa'),\n (['Roland', 'Schwarz'], 'Roland_Schwarz_Africa'),\n (['Roy', 'Skaria'], 'Roy_Skaria_Africa'),\n (['Rick', 'Wilson'], 'Rick_Wilson_Africa'),\n (['Rob', 'Williams'], 'Rob_Williams_Africa'),\n (['Robert', 'Waldorf'], 'Robert_Waldorf_Africa'),\n (['Sue', 'Ann', 'Reed'], 'Sue_Ann_Reed_Africa'),\n (['Sarah', 'Bern'], 'Sarah_Bern_Africa'),\n (['Sarah', 'Brown'], 'Sarah_Brown_Africa'),\n (['Sam', 'Craven'], 'Sam_Craven_Africa'),\n (['Sample', 'Company', 'A'], 'Sample_Company_A_Africa'),\n (['Sanjit', 'Chand'], 'Sanjit_Chand_Africa'),\n (['Scot', 'Coram'], 'Scot_Coram_Africa'),\n (['Sean', 'Christensen'], 'Sean_Christensen_Africa'),\n (['Shahid', 'Collister'], 'Shahid_Collister_Africa'),\n (['Shaun', 'Chance'], 'Shaun_Chance_Africa'),\n (['Steve', 'Carroll'], 'Steve_Carroll_Africa'),\n (['Steve', 'Chapman'], 'Steve_Chapman_Africa'),\n (['Steven', 'Cartwright'], 'Steven_Cartwright_Africa'),\n (['Stewart', 'Carmichael'], 'Stewart_Carmichael_Africa'),\n (['Stuart', 'Calhoun'], 'Stuart_Calhoun_Africa'),\n (['Sung', 'Chung'], 'Sung_Chung_Africa'),\n (['Shirley', 'Daniels'], 'Shirley_Daniels_Africa'),\n (['Sanjit', 'Engle'], 'Sanjit_Engle_Africa'),\n (['Sandra', 'Flanagan'], 'Sandra_Flanagan_Africa'),\n (['Sarah', 'Foster'], 'Sarah_Foster_Africa'),\n (['Sylvia', 'Foulston'], 'Sylvia_Foulston_Africa'),\n (['Sandra', 'Glassco'], 'Sandra_Glassco_Africa'),\n (['Sheri', 'Gordon'], 'Sheri_Gordon_Africa'),\n (['Speros', 'Goranitis'], 'Speros_Goranitis_Africa'),\n (['Susan', 'Gilcrest'], 'Susan_Gilcrest_Africa'),\n (['Shahid', 'Hopkins'], 'Shahid_Hopkins_Africa'),\n (['Sally', 'Hughsby'], 'Sally_Hughsby_Africa'),\n (['Sanjit', 'Jacobs'], 'Sanjit_Jacobs_Africa'),\n (['Sarah', 'Jordon'], 'Sarah_Jordon_Africa'),\n (['Sally', 'Knutson'], 'Sally_Knutson_Africa'),\n (['Sara', 'Luxemburg'], 'Sara_Luxemburg_Africa'),\n (['Sally', 'Matthias'], 'Sally_Matthias_Africa'),\n (['Sean', 'Miller'], 'Sean_Miller_Africa'),\n (['Susan', 'MacKendrick'], 'Susan_MacKendrick_Africa'),\n (['Suzanne', 'McNair'], 'Suzanne_McNair_Africa'),\n (['Skye', 'Norling'], 'Skye_Norling_Africa'),\n (['Steve', 'Nguyen'], 'Steve_Nguyen_Africa'),\n (['Sean', \"O'Donnell\"], \"Sean_O'Donnell_Africa\"),\n (['Sibella', 'Parks'], 'Sibella_Parks_Africa'),\n (['Stefania', 'Perrino'], 'Stefania_Perrino_Africa'),\n (['Stephanie', 'Phelps'], 'Stephanie_Phelps_Africa'),\n (['Sung', 'Pak'], 'Sung_Pak_Africa'),\n (['Susan', 'Pistek'], 'Susan_Pistek_Africa'),\n (['Sharelle', 'Roach'], 'Sharelle_Roach_Africa'),\n (['Steven', 'Roelle'], 'Steven_Roelle_Africa'),\n (['Saphhira', 'Shifley'], 'Saphhira_Shifley_Africa'),\n (['Shahid', 'Shariari'], 'Shahid_Shariari_Africa'),\n (['Shirley', 'Schmidt'], 'Shirley_Schmidt_Africa'),\n (['Sonia', 'Sunley'], 'Sonia_Sunley_Africa'),\n (['Sung', 'Shariari'], 'Sung_Shariari_Africa'),\n (['Shui', 'Tom'], 'Shui_Tom_Africa'),\n (['Stephanie', 'Ulpright'], 'Stephanie_Ulpright_Africa'),\n (['Stewart', 'Visinsky'], 'Stewart_Visinsky_Africa'),\n (['Stuart', 'Van'], 'Stuart_Van_Africa'),\n (['Susan', 'Vittorini'], 'Susan_Vittorini_Africa'),\n (['Scot', 'Wooten'], 'Scot_Wooten_Africa'),\n (['Scott', 'Williamson'], 'Scott_Williamson_Africa'),\n (['Sean', 'Wendt'], 'Sean_Wendt_Africa'),\n (['Shaun', 'Weien'], 'Shaun_Weien_Africa'),\n (['Steven', 'Ward'], 'Steven_Ward_Africa'),\n (['Sam', 'Zeldin'], 'Sam_Zeldin_Africa'),\n (['Tom', 'Ashbrook'], 'Tom_Ashbrook_Africa'),\n (['Ted', 'Butterfield'], 'Ted_Butterfield_Africa'),\n (['Thomas', 'Boland'], 'Thomas_Boland_Africa'),\n (['Thomas', 'Brumley'], 'Thomas_Brumley_Africa'),\n (['Tim', 'Brockman'], 'Tim_Brockman_Africa'),\n (['Toby', 'Braunhardt'], 'Toby_Braunhardt_Africa'),\n (['Todd', 'Boyes'], 'Todd_Boyes_Africa'),\n (['Tom', 'Boeckenhauer'], 'Tom_Boeckenhauer_Africa'),\n (['Tracy', 'Blumstein'], 'Tracy_Blumstein_Africa'),\n (['Troy', 'Blackwell'], 'Troy_Blackwell_Africa'),\n (['Trudy', 'Brown'], 'Trudy_Brown_Africa'),\n (['Tamara', 'Chand'], 'Tamara_Chand_Africa'),\n (['Theresa', 'Coyne'], 'Theresa_Coyne_Africa'),\n (['Toby', 'Carlisle'], 'Toby_Carlisle_Africa'),\n (['Tony', 'Chapman'], 'Tony_Chapman_Africa'),\n (['Tracy', 'Collins'], 'Tracy_Collins_Africa'),\n (['Tamara', 'Dahlen'], 'Tamara_Dahlen_Africa'),\n (['Toby', 'Gnade'], 'Toby_Gnade_Africa'),\n (['Trudy', 'Glocke'], 'Trudy_Glocke_Africa'),\n (['Thea', 'Hendricks'], 'Thea_Hendricks_Africa'),\n (['Thea', 'Hudgings'], 'Thea_Hudgings_Africa'),\n (['Tiffany', 'House'], 'Tiffany_House_Africa'),\n (['Tracy', 'Hopkins'], 'Tracy_Hopkins_Africa'),\n (['Tamara', 'Manning'], 'Tamara_Manning_Africa'),\n (['Tony', 'Molinari'], 'Tony_Molinari_Africa'),\n (['Tanja', 'Norvell'], 'Tanja_Norvell_Africa'),\n (['Theone', 'Pippenger'], 'Theone_Pippenger_Africa'),\n (['Tom', 'Prescott'], 'Tom_Prescott_Africa'),\n (['Tracy', 'Poddar'], 'Tracy_Poddar_Africa'),\n (['Toby', 'Ritter'], 'Toby_Ritter_Africa'),\n (['Thais', 'Sissman'], 'Thais_Sissman_Africa'),\n (['Theresa', 'Swint'], 'Theresa_Swint_Africa'),\n (['Thomas', 'Seio'], 'Thomas_Seio_Africa'),\n (['Toby', 'Swindell'], 'Toby_Swindell_Africa'),\n (['Todd', 'Sumrall'], 'Todd_Sumrall_Africa'),\n (['Tom', 'Stivers'], 'Tom_Stivers_Africa'),\n (['Tony', 'Sayre'], 'Tony_Sayre_Africa'),\n (['Troy', 'Staebel'], 'Troy_Staebel_Africa'),\n (['Trudy', 'Schmidt'], 'Trudy_Schmidt_Africa'),\n (['Ted', 'Trevino'], 'Ted_Trevino_Africa'),\n (['Thomas', 'Thornton'], 'Thomas_Thornton_Africa'),\n (['Tim', 'Taslimi'], 'Tim_Taslimi_Africa'),\n (['Tonja', 'Turnell'], 'Tonja_Turnell_Africa'),\n (['Tamara', 'Willingham'], 'Tamara_Willingham_Africa'),\n (['Tom', 'Zandusky'], 'Tom_Zandusky_Africa'),\n (['Tracy', 'Zic'], 'Tracy_Zic_Africa'),\n (['Victoria', 'Brennan'], 'Victoria_Brennan_Africa'),\n (['Valerie', 'Dominguez'], 'Valerie_Dominguez_Africa'),\n (['Vicky', 'Freymann'], 'Vicky_Freymann_Africa'),\n (['Vivek', 'Gonzalez'], 'Vivek_Gonzalez_Africa'),\n (['Vivek', 'Grady'], 'Vivek_Grady_Africa'),\n (['Valerie', 'Mitchum'], 'Valerie_Mitchum_Africa'),\n (['Vivian', 'Mathis'], 'Vivian_Mathis_Africa'),\n (['Victor', 'Preis'], 'Victor_Preis_Africa'),\n (['Victoria', 'Pisteka'], 'Victoria_Pisteka_Africa'),\n (['Vivek', 'Sundaresam'], 'Vivek_Sundaresam_Africa'),\n (['Valerie', 'Takahito'], 'Valerie_Takahito_Africa'),\n (['Victoria', 'Wilson'], 'Victoria_Wilson_Africa'),\n (['William', 'Brown'], 'William_Brown_Africa'),\n (['Xylona', 'Preis'], 'Xylona_Preis_Africa'),\n (['Yoseph', 'Carroll'], 'Yoseph_Carroll_Africa'),\n (['Yana', 'Sorensen'], 'Yana_Sorensen_Africa'),\n (['Zuschuss', 'Carroll'], 'Zuschuss_Carroll_Africa'),\n (['Zuschuss', 'Donatelli'], 'Zuschuss_Donatelli_Africa')]"
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "documents"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   1,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   1,\n   0,\n   0],\n  [0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   1,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0]],\n [[0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   1,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   1,\n   0,\n   0],\n  [0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   0,\n   1,\n   0,\n   0,\n   0,\n   0,\n   0]]]"
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create our training data\n",
    "training = []\n",
    "# create an empty array for our output\n",
    "output_empty = [0] * len(classes)\n",
    "# training set, bag of words for each sentence\n",
    "for doc in documents:\n",
    "    # initialize our bag of words\n",
    "    bag = []\n",
    "    # list of tokenized words for the pattern\n",
    "    pattern_words = doc[0]\n",
    "    # lemmatize each word - create base word, in attempt to represent related words\n",
    "    pattern_words = [lemmatizer.lemmatize(word.lower()) for word in pattern_words]\n",
    "    # create our bag of words array with 1, if word match found in current pattern\n",
    "    for w in words:\n",
    "        bag.append(1) if w in pattern_words else bag.append(0)\n",
    "    # output is a '0' for each tag and '1' for current tag (for each pattern)\n",
    "    output_row = list(output_empty)\n",
    "    output_row[classes.index(doc[1])] = 1\n",
    "    training.append([bag, output_row])\n",
    "training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": "Training data created\n"
    }
   ],
   "source": [
    "\n",
    "# shuffle our features and turn into np.array\n",
    "random.shuffle(training)\n",
    "training = np.array(training)\n",
    "# create train and test lists. X - patterns, Y - intents\n",
    "train_x = list(training[:,0])\n",
    "train_y = list(training[:,1])\n",
    "print('Training data created')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": ", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),\n        list([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])],\n       ...,\n       [list([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),\n        list([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])],\n       [list([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),\n        list([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])],\n       [list([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),\n        list([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])]],\n      dtype=object)"
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "training"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Build the model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have our training data ready, now we will build a deep neural network that has 3 layers. We use the Keras sequential API for this. After training the model for 200 epochs, we achieved 100% accuracy on our model. Let us save the model as ‘chatbot_model.h5’"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": "4 - accuracy: 0.0128\nEpoch 10/200\n781/781 [==============================] - 0s 526us/step - loss: 6.5749 - accuracy: 0.0115\nEpoch 11/200\n781/781 [==============================] - 0s 526us/step - loss: 6.5598 - accuracy: 0.0090\nEpoch 12/200\n781/781 [==============================] - 0s 427us/step - loss: 6.5392 - accuracy: 0.0141\nEpoch 13/200\n781/781 [==============================] - 0s 487us/step - loss: 6.5137 - accuracy: 0.0154\nEpoch 14/200\n781/781 [==============================] - 0s 540us/step - loss: 6.4932 - accuracy: 0.0115\nEpoch 15/200\n781/781 [==============================] - 0s 385us/step - loss: 6.4794 - accuracy: 0.0128\nEpoch 16/200\n781/781 [==============================] - 0s 507us/step - loss: 6.4590 - accuracy: 0.0115\nEpoch 17/200\n781/781 [==============================] - 0s 424us/step - loss: 6.4464 - accuracy: 0.0115\nEpoch 18/200\n781/781 [==============================] - 0s 368us/step - loss: 6.4251 - accuracy: 0.0154\nEpoch 19/200\n781/781 [==============================] - 0s 457us/step - loss: 6.4188 - accuracy: 0.0141\nEpoch 20/200\n781/781 [==============================] - 0s 563us/step - loss: 6.3917 - accuracy: 0.0141\nEpoch 21/200\n781/781 [==============================] - 0s 426us/step - loss: 6.3671 - accuracy: 0.0154\nEpoch 22/200\n781/781 [==============================] - 0s 376us/step - loss: 6.3473 - accuracy: 0.0192\nEpoch 23/200\n781/781 [==============================] - 0s 507us/step - loss: 6.3231 - accuracy: 0.0179\nEpoch 24/200\n781/781 [==============================] - 0s 442us/step - loss: 6.2919 - accuracy: 0.0192\nEpoch 25/200\n781/781 [==============================] - 1s 673us/step - loss: 6.2550 - accuracy: 0.0166\nEpoch 26/200\n781/781 [==============================] - 0s 443us/step - loss: 6.2296 - accuracy: 0.0218\nEpoch 27/200\n781/781 [==============================] - 1s 715us/step - loss: 6.1446 - accuracy: 0.0333\nEpoch 28/200\n781/781 [==============================] - 0s 591us/step - loss: 6.1355 - accuracy: 0.0282\nEpoch 29/200\n781/781 [==============================] - 0s 513us/step - loss: 6.0630 - accuracy: 0.0282\nEpoch 30/200\n781/781 [==============================] - 1s 649us/step - loss: 6.0233 - accuracy: 0.0282\nEpoch 31/200\n781/781 [==============================] - 0s 555us/step - loss: 5.9164 - accuracy: 0.0359\nEpoch 32/200\n781/781 [==============================] - 0s 521us/step - loss: 5.8524 - accuracy: 0.0384\nEpoch 33/200\n781/781 [==============================] - 0s 437us/step - loss: 5.7602 - accuracy: 0.0461\nEpoch 34/200\n781/781 [==============================] - 0s 520us/step - loss: 5.6605 - accuracy: 0.0410\nEpoch 35/200\n781/781 [==============================] - 0s 461us/step - loss: 5.5078 - accuracy: 0.0512\nEpoch 36/200\n781/781 [==============================] - 0s 428us/step - loss: 5.3318 - accuracy: 0.0627\nEpoch 37/200\n781/781 [==============================] - 0s 550us/step - loss: 5.2347 - accuracy: 0.0704\nEpoch 38/200\n781/781 [==============================] - 0s 607us/step - loss: 5.1444 - accuracy: 0.0730\nEpoch 39/200\n781/781 [==============================] - 0s 396us/step - loss: 4.8700 - accuracy: 0.0922\nEpoch 40/200\n781/781 [==============================] - 0s 460us/step - loss: 4.7115 - accuracy: 0.1024\nEpoch 41/200\n781/781 [==============================] - 0s 564us/step - loss: 4.6696 - accuracy: 0.0999\nEpoch 42/200\n781/781 [==============================] - 0s 523us/step - loss: 4.4737 - accuracy: 0.1255\nEpoch 43/200\n781/781 [==============================] - 0s 453us/step - loss: 4.2649 - accuracy: 0.1562\nEpoch 44/200\n781/781 [==============================] - 0s 459us/step - loss: 4.2403 - accuracy: 0.1485\nEpoch 45/200\n781/781 [==============================] - 0s 565us/step - loss: 4.0632 - accuracy: 0.1665\nEpoch 46/200\n781/781 [==============================] - 0s 426us/step - loss: 3.9798 - accuracy: 0.1665\nEpoch 47/200\n781/781 [==============================] - 0s 421us/step - loss: 3.9320 - accuracy: 0.1741\nEpoch 48/200\n781/781 [==============================] - 0s 557us/step - loss: 3.8121 - accuracy: 0.1677\nEpoch 49/200\n781/781 [==============================] - 0s 488us/step - loss: 3.6612 - accuracy: 0.1959\nEpoch 50/200\n781/781 [==============================] - 0s 439us/step - loss: 3.6990 - accuracy: 0.1869\nEpoch 51/200\n781/781 [==============================] - 0s 533us/step - loss: 3.6010 - accuracy: 0.1805\nEpoch 52/200\n781/781 [==============================] - 0s 635us/step - loss: 3.4290 - accuracy: 0.2164\nEpoch 53/200\n781/781 [==============================] - 0s 580us/step - loss: 3.4623 - accuracy: 0.2190\nEpoch 54/200\n781/781 [==============================] - 1s 641us/step - loss: 3.3731 - accuracy: 0.2266\nEpoch 55/200\n781/781 [==============================] - 1s 649us/step - loss: 3.3309 - accuracy: 0.2394\nEpoch 56/200\n781/781 [==============================] - 0s 432us/step - loss: 3.3145 - accuracy: 0.2574\nEpoch 57/200\n781/781 [==============================] - 0s 403us/step - loss: 3.1959 - accuracy: 0.2689\nEpoch 58/200\n781/781 [==============================] - 1s 714us/step - loss: 3.1046 - accuracy: 0.2983\nEpoch 59/200\n781/781 [==============================] - 0s 461us/step - loss: 2.9157 - accuracy: 0.3073\nEpoch 60/200\n781/781 [==============================] - 0s 412us/step - loss: 2.9677 - accuracy: 0.2894\nEpoch 61/200\n781/781 [==============================] - 0s 536us/step - loss: 2.9229 - accuracy: 0.3150\nEpoch 62/200\n781/781 [==============================] - 0s 463us/step - loss: 2.9369 - accuracy: 0.3137\nEpoch 63/200\n781/781 [==============================] - 0s 374us/step - loss: 2.9766 - accuracy: 0.3073\nEpoch 64/200\n781/781 [==============================] - 0s 520us/step - loss: 2.9230 - accuracy: 0.3099\nEpoch 65/200\n781/781 [==============================] - 0s 469us/step - loss: 2.8025 - accuracy: 0.3367\nEpoch 66/200\n781/781 [==============================] - 0s 518us/step - loss: 2.8427 - accuracy: 0.2983\nEpoch 67/200\n781/781 [==============================] - 0s 475us/step - loss: 2.8213 - accuracy: 0.3201\nEpoch 68/200\n781/781 [==============================] - 0s 518us/step - loss: 2.6822 - accuracy: 0.3508\nEpoch 69/200\n781/781 [==============================] - 0s 564us/step - loss: 2.7597 - accuracy: 0.3214\nEpoch 70/200\n781/781 [==============================] - 0s 423us/step - loss: 2.6667 - accuracy: 0.3496\nEpoch 71/200\n781/781 [==============================] - 0s 480us/step - loss: 2.7110 - accuracy: 0.3406\nEpoch 72/200\n781/781 [==============================] - 0s 619us/step - loss: 2.6737 - accuracy: 0.3457\nEpoch 73/200\n781/781 [==============================] - 0s 460us/step - loss: 2.5968 - accuracy: 0.3585\nEpoch 74/200\n781/781 [==============================] - 0s 514us/step - loss: 2.5826 - accuracy: 0.3547\nEpoch 75/200\n781/781 [==============================] - 0s 622us/step - loss: 2.6305 - accuracy: 0.3534\nEpoch 76/200\n781/781 [==============================] - 0s 489us/step - loss: 2.5528 - accuracy: 0.3880\nEpoch 77/200\n781/781 [==============================] - 0s 606us/step - loss: 2.5472 - accuracy: 0.3572\nEpoch 78/200\n781/781 [==============================] - 0s 531us/step - loss: 2.5318 - accuracy: 0.3534\nEpoch 79/200\n781/781 [==============================] - 1s 653us/step - loss: 2.4960 - accuracy: 0.3854\nEpoch 80/200\n781/781 [==============================] - 0s 611us/step - loss: 2.4425 - accuracy: 0.3777\nEpoch 81/200\n781/781 [==============================] - 1s 768us/step - loss: 2.5153 - accuracy: 0.3675\nEpoch 82/200\n781/781 [==============================] - 0s 568us/step - loss: 2.4373 - accuracy: 0.3816\nEpoch 83/200\n781/781 [==============================] - 1s 788us/step - loss: 2.3302 - accuracy: 0.4174\nEpoch 84/200\n781/781 [==============================] - 1s 659us/step - loss: 2.4092 - accuracy: 0.3790\nEpoch 85/200\n781/781 [==============================] - 1s 724us/step - loss: 2.4554 - accuracy: 0.3790\nEpoch 86/200\n781/781 [==============================] - 1s 680us/step - loss: 2.4513 - accuracy: 0.3918\nEpoch 87/200\n781/781 [==============================] - 0s 613us/step - loss: 2.4563 - accuracy: 0.3995\nEpoch 88/200\n781/781 [==============================] - 1s 667us/step - loss: 2.5295 - accuracy: 0.3636\nEpoch 89/200\n781/781 [==============================] - 1s 695us/step - loss: 2.2517 - accuracy: 0.4277\nEpoch 90/200\n781/781 [==============================] - 0s 514us/step - loss: 2.3564 - accuracy: 0.4020\nEpoch 91/200\n781/781 [==============================] - 1s 653us/step - loss: 2.2633 - accuracy: 0.4328\nEpoch 92/200\n781/781 [==============================] - 0s 576us/step - loss: 2.3966 - accuracy: 0.4149\nEpoch 93/200\n781/781 [==============================] - 0s 537us/step - loss: 2.2644 - accuracy: 0.4277\nEpoch 94/200\n781/781 [==============================] - 1s 681us/step - loss: 2.4019 - accuracy: 0.4225\nEpoch 95/200\n781/781 [==============================] - 0s 498us/step - loss: 2.3456 - accuracy: 0.4238\nEpoch 96/200\n781/781 [==============================] - 0s 468us/step - loss: 2.3710 - accuracy: 0.3918\nEpoch 97/200\n781/781 [==============================] - 0s 507us/step - loss: 2.3408 - accuracy: 0.4072\nEpoch 98/200\n781/781 [==============================] - 1s 690us/step - loss: 2.2613 - accuracy: 0.4597\nEpoch 99/200\n781/781 [==============================] - 0s 637us/step - loss: 2.2621 - accuracy: 0.4353\nEpoch 100/200\n781/781 [==============================] - 0s 486us/step - loss: 2.1950 - accuracy: 0.4251\nEpoch 101/200\n781/781 [==============================] - 1s 641us/step - loss: 2.3129 - accuracy: 0.4225\nEpoch 102/200\n781/781 [==============================] - 0s 504us/step - loss: 2.1991 - accuracy: 0.4264\nEpoch 103/200\n781/781 [==============================] - 0s 632us/step - loss: 2.4140 - accuracy: 0.4136\nEpoch 104/200\n781/781 [==============================] - 0s 541us/step - loss: 2.2272 - accuracy: 0.4251\nEpoch 105/200\n781/781 [==============================] - 0s 609us/step - loss: 2.2753 - accuracy: 0.4277\nEpoch 106/200\n781/781 [==============================] - 0s 519us/step - loss: 2.1933 - accuracy: 0.4366\nEpoch 107/200\n781/781 [==============================] - 0s 493us/step - loss: 2.1830 - accuracy: 0.4366\nEpoch 108/200\n781/781 [==============================] - 1s 705us/step - loss: 2.3516 - accuracy: 0.4161\nEpoch 109/200\n781/781 [==============================] - 0s 500us/step - loss: 2.1309 - accuracy: 0.4417\nEpoch 110/200\n781/781 [==============================] - 0s 413us/step - loss: 2.1377 - accuracy: 0.4520\nEpoch 111/200\n781/781 [==============================] - 0s 416us/step - loss: 2.1533 - accuracy: 0.4776\nEpoch 112/200\n781/781 [==============================] - 0s 560us/step - loss: 2.2181 - accuracy: 0.4264\nEpoch 113/200\n781/781 [==============================] - 0s 461us/step - loss: 2.2164 - accuracy: 0.4494\nEpoch 114/200\n781/781 [==============================] - 0s 440us/step - loss: 2.1410 - accuracy: 0.4417\nEpoch 115/200\n781/781 [==============================] - 0s 537us/step - loss: 2.1911 - accuracy: 0.4405\nEpoch 116/200\n781/781 [==============================] - 0s 440us/step - loss: 2.1400 - accuracy: 0.4533\nEpoch 117/200\n781/781 [==============================] - 0s 447us/step - loss: 2.1295 - accuracy: 0.4635\nEpoch 118/200\n781/781 [==============================] - 0s 485us/step - loss: 2.1923 - accuracy: 0.4405\nEpoch 119/200\n781/781 [==============================] - 0s 434us/step - loss: 2.1720 - accuracy: 0.4699\nEpoch 120/200\n781/781 [==============================] - 0s 600us/step - loss: 2.2040 - accuracy: 0.4469\nEpoch 121/200\n781/781 [==============================] - 0s 442us/step - loss: 2.1423 - accuracy: 0.4584\nEpoch 122/200\n781/781 [==============================] - 0s 425us/step - loss: 2.1328 - accuracy: 0.4507\nEpoch 123/200\n781/781 [==============================] - 0s 506us/step - loss: 2.1537 - accuracy: 0.4763\nEpoch 124/200\n781/781 [==============================] - 0s 503us/step - loss: 2.1523 - accuracy: 0.4520\nEpoch 125/200\n781/781 [==============================] - 0s 456us/step - loss: 2.0877 - accuracy: 0.4673\nEpoch 126/200\n781/781 [==============================] - 0s 539us/step - loss: 2.0171 - accuracy: 0.4725\nEpoch 127/200\n781/781 [==============================] - 0s 507us/step - loss: 2.1859 - accuracy: 0.4481\nEpoch 128/200\n781/781 [==============================] - 0s 454us/step - loss: 2.1109 - accuracy: 0.4609\nEpoch 129/200\n781/781 [==============================] - 0s 572us/step - loss: 2.0909 - accuracy: 0.4648\nEpoch 130/200\n781/781 [==============================] - 0s 559us/step - loss: 2.0510 - accuracy: 0.4712\nEpoch 131/200\n781/781 [==============================] - 1s 649us/step - loss: 2.1228 - accuracy: 0.4622\nEpoch 132/200\n781/781 [==============================] - 0s 455us/step - loss: 2.1330 - accuracy: 0.4315\nEpoch 133/200\n781/781 [==============================] - 0s 413us/step - loss: 2.0868 - accuracy: 0.4699\nEpoch 134/200\n781/781 [==============================] - 0s 619us/step - loss: 2.1638 - accuracy: 0.4584\nEpoch 135/200\n781/781 [==============================] - 0s 548us/step - loss: 2.0057 - accuracy: 0.4878\nEpoch 136/200\n781/781 [==============================] - 0s 493us/step - loss: 1.9868 - accuracy: 0.4738\nEpoch 137/200\n781/781 [==============================] - 0s 448us/step - loss: 1.9836 - accuracy: 0.4994\nEpoch 138/200\n781/781 [==============================] - 0s 503us/step - loss: 2.0123 - accuracy: 0.4994\nEpoch 139/200\n781/781 [==============================] - 0s 503us/step - loss: 2.0551 - accuracy: 0.4725\nEpoch 140/200\n781/781 [==============================] - 0s 449us/step - loss: 2.1002 - accuracy: 0.4763\nEpoch 141/200\n781/781 [==============================] - 0s 495us/step - loss: 2.1087 - accuracy: 0.4840\nEpoch 142/200\n781/781 [==============================] - 0s 526us/step - loss: 2.0414 - accuracy: 0.4763\nEpoch 143/200\n781/781 [==============================] - 0s 464us/step - loss: 2.0744 - accuracy: 0.4738\nEpoch 144/200\n781/781 [==============================] - 0s 427us/step - loss: 2.0847 - accuracy: 0.4481\nEpoch 145/200\n781/781 [==============================] - 0s 479us/step - loss: 1.9707 - accuracy: 0.4917\nEpoch 146/200\n781/781 [==============================] - 0s 487us/step - loss: 2.0905 - accuracy: 0.4635\nEpoch 147/200\n781/781 [==============================] - 0s 561us/step - loss: 2.0921 - accuracy: 0.4763\nEpoch 148/200\n781/781 [==============================] - 0s 446us/step - loss: 2.0495 - accuracy: 0.4686\nEpoch 149/200\n781/781 [==============================] - 0s 481us/step - loss: 2.0322 - accuracy: 0.5006\nEpoch 150/200\n781/781 [==============================] - 0s 524us/step - loss: 1.9968 - accuracy: 0.5032\nEpoch 151/200\n781/781 [==============================] - 0s 575us/step - loss: 2.0075 - accuracy: 0.4789\nEpoch 152/200\n781/781 [==============================] - 0s 540us/step - loss: 2.1446 - accuracy: 0.4763\nEpoch 153/200\n781/781 [==============================] - 1s 674us/step - loss: 2.0279 - accuracy: 0.4802\nEpoch 154/200\n781/781 [==============================] - 0s 525us/step - loss: 2.1533 - accuracy: 0.4597\nEpoch 155/200\n781/781 [==============================] - 0s 581us/step - loss: 2.0879 - accuracy: 0.4443\nEpoch 156/200\n781/781 [==============================] - 0s 634us/step - loss: 2.0854 - accuracy: 0.4840\nEpoch 157/200\n781/781 [==============================] - 0s 480us/step - loss: 2.0577 - accuracy: 0.4699\nEpoch 158/200\n781/781 [==============================] - 0s 525us/step - loss: 2.0252 - accuracy: 0.4789\nEpoch 159/200\n781/781 [==============================] - 0s 470us/step - loss: 2.0021 - accuracy: 0.4789\nEpoch 160/200\n781/781 [==============================] - 1s 651us/step - loss: 1.8167 - accuracy: 0.5288\nEpoch 161/200\n781/781 [==============================] - 0s 525us/step - loss: 2.0156 - accuracy: 0.4802\nEpoch 162/200\n781/781 [==============================] - 0s 439us/step - loss: 2.0328 - accuracy: 0.4994\nEpoch 163/200\n781/781 [==============================] - 0s 565us/step - loss: 2.0059 - accuracy: 0.5122\nEpoch 164/200\n781/781 [==============================] - 0s 512us/step - loss: 1.8250 - accuracy: 0.5262\nEpoch 165/200\n781/781 [==============================] - 0s 425us/step - loss: 2.0125 - accuracy: 0.4712\nEpoch 166/200\n781/781 [==============================] - 0s 430us/step - loss: 1.9089 - accuracy: 0.5019\nEpoch 167/200\n781/781 [==============================] - 0s 570us/step - loss: 2.0554 - accuracy: 0.4725\nEpoch 168/200\n781/781 [==============================] - 0s 421us/step - loss: 1.8584 - accuracy: 0.5288\nEpoch 169/200\n781/781 [==============================] - 0s 495us/step - loss: 2.0248 - accuracy: 0.5173\nEpoch 170/200\n781/781 [==============================] - 0s 520us/step - loss: 1.9691 - accuracy: 0.5045\nEpoch 171/200\n781/781 [==============================] - 0s 455us/step - loss: 1.9943 - accuracy: 0.4776\nEpoch 172/200\n781/781 [==============================] - 0s 424us/step - loss: 2.0234 - accuracy: 0.4635\nEpoch 173/200\n781/781 [==============================] - 0s 510us/step - loss: 1.9043 - accuracy: 0.4994\nEpoch 174/200\n781/781 [==============================] - 0s 499us/step - loss: 2.0129 - accuracy: 0.5058\nEpoch 175/200\n781/781 [==============================] - 0s 441us/step - loss: 2.1033 - accuracy: 0.4750\nEpoch 176/200\n781/781 [==============================] - 0s 565us/step - loss: 1.9582 - accuracy: 0.4955\nEpoch 177/200\n781/781 [==============================] - 0s 594us/step - loss: 2.0084 - accuracy: 0.4994\nEpoch 178/200\n781/781 [==============================] - 0s 529us/step - loss: 1.8311 - accuracy: 0.5262\nEpoch 179/200\n781/781 [==============================] - 0s 552us/step - loss: 2.1295 - accuracy: 0.4635\nEpoch 180/200\n781/781 [==============================] - 0s 607us/step - loss: 2.0312 - accuracy: 0.4840\nEpoch 181/200\n781/781 [==============================] - 1s 720us/step - loss: 1.9634 - accuracy: 0.4994\nEpoch 182/200\n781/781 [==============================] - 0s 555us/step - loss: 1.9993 - accuracy: 0.4878\nEpoch 183/200\n781/781 [==============================] - 0s 577us/step - loss: 2.0383 - accuracy: 0.4635\nEpoch 184/200\n781/781 [==============================] - 0s 634us/step - loss: 2.0386 - accuracy: 0.4904\nEpoch 185/200\n781/781 [==============================] - 0s 484us/step - loss: 2.0455 - accuracy: 0.4994\nEpoch 186/200\n781/781 [==============================] - 0s 555us/step - loss: 2.0585 - accuracy: 0.4917\nEpoch 187/200\n781/781 [==============================] - 1s 665us/step - loss: 1.9360 - accuracy: 0.5032\nEpoch 188/200\n781/781 [==============================] - 1s 733us/step - loss: 1.8153 - accuracy: 0.5506\nEpoch 189/200\n781/781 [==============================] - 0s 515us/step - loss: 2.0499 - accuracy: 0.4712\nEpoch 190/200\n781/781 [==============================] - 0s 416us/step - loss: 1.9316 - accuracy: 0.4917\nEpoch 191/200\n781/781 [==============================] - 1s 701us/step - loss: 1.9091 - accuracy: 0.5134\nEpoch 192/200\n781/781 [==============================] - 0s 486us/step - loss: 2.0656 - accuracy: 0.4469\nEpoch 193/200\n781/781 [==============================] - 0s 451us/step - loss: 1.9559 - accuracy: 0.5198\nEpoch 194/200\n781/781 [==============================] - 1s 735us/step - loss: 1.9699 - accuracy: 0.4904\nEpoch 195/200\n781/781 [==============================] - 0s 585us/step - loss: 2.0175 - accuracy: 0.4981\nEpoch 196/200\n781/781 [==============================] - 0s 553us/step - loss: 1.9783 - accuracy: 0.5019\nEpoch 197/200\n781/781 [==============================] - 0s 556us/step - loss: 2.0059 - accuracy: 0.5032\nEpoch 198/200\n781/781 [==============================] - 0s 591us/step - loss: 1.9712 - accuracy: 0.5058\nEpoch 199/200\n781/781 [==============================] - 0s 523us/step - loss: 1.9412 - accuracy: 0.5134\nEpoch 200/200\n781/781 [==============================] - 1s 699us/step - loss: 1.8793 - accuracy: 0.4968\nmodel created\n"
    }
   ],
   "source": [
    "# Create model - 3 layers. First layer 128 neurons, second layer 64 neurons and 3rd output layer contains number of neurons\n",
    "# equal to number of intents to predict output intent with softmax\n",
    "model = Sequential()\n",
    "model.add(Dense(128, input_shape=(len(train_x[0]),), activation='relu'))\n",
    "model.add(Dropout(0.5))\n",
    "model.add(Dense(64, activation='relu'))\n",
    "model.add(Dropout(0.5))\n",
    "model.add(Dense(len(train_y[0]), activation='softmax'))\n",
    "# Compile model. Stochastic gradient descent with Nesterov accelerated gradient gives good results for this model\n",
    "sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)\n",
    "model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])\n",
    "#fitting and saving the model \n",
    "hist = model.fit(np.array(train_x), np.array(train_y), epochs=200, batch_size=5, verbose=1)\n",
    "model.save('chatbot_model.h5', hist)\n",
    "print(\"model created\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Predict the response"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now to predict the sentences and get a response from the user to let us create a new file ‘chatapp.py’.\n",
    "\n",
    "> The model will only tell us the class it belongs to, so we will implement some functions which will identify the class and then retrieve us a random response from the list of responses."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "x 11',\n    'Stiletto Ruler, Easy Grip',\n    'Ibico Binder, Recycled',\n    'Stanley Pencil Sharpener, Water Color',\n    'Nokia Speaker Phone, Cordless']},\n  {'tag': 'Stuart_Van_Africa',\n   'patterns': ['Stuart Van'],\n   'responses': ['Deflect-O Clock, Duo Pack',\n    'Stanley Pencil Sharpener, Water Color',\n    'Nokia Speaker Phone, Cordless',\n    'Kraft Mailers, Recycled',\n    'Boston Markers, Easy-Erase']},\n  {'tag': 'Susan_Vittorini_Africa',\n   'patterns': ['Susan Vittorini'],\n   'responses': ['Eaton Computer Printout Paper, 8.5 x 11',\n    'Stiletto Ruler, Easy Grip',\n    'Ibico Binder, Recycled',\n    'Stanley Pencil Sharpener, Water Color',\n    'Nokia Speaker Phone, Cordless']},\n  {'tag': 'Scot_Wooten_Africa',\n   'patterns': ['Scot Wooten'],\n   'responses': ['Eldon Shelving, Blue',\n    'Elite Ruler, Serrated',\n    'Hoover Microwave, White',\n    'Boston Markers, Easy-Erase',\n    'Epson Card Printer, Durable']},\n  {'tag': 'Scott_Williamson_Africa',\n   'patterns': ['Scott Williamson'],\n   'responses': ['Eaton Computer Printout Paper, 8.5 x 11',\n    'Stiletto Ruler, Easy Grip',\n    'Boston Markers, Easy-Erase',\n    'Nokia Speaker Phone, Cordless',\n    'Novimex Legal Exhibit Labels, Laser Printer Compatible']},\n  {'tag': 'Sean_Wendt_Africa',\n   'patterns': ['Sean Wendt'],\n   'responses': ['Eaton Computer Printout Paper, 8.5 x 11',\n    'Stiletto Ruler, Easy Grip',\n    'Ibico Binder, Recycled',\n    'Stanley Pencil Sharpener, Water Color',\n    'Nokia Speaker Phone, Cordless']},\n  {'tag': 'Shaun_Weien_Africa',\n   'patterns': ['Shaun Weien'],\n   'responses': ['Eaton Computer Printout Paper, 8.5 x 11',\n    'Stiletto Ruler, Easy Grip',\n    'Hon Color Coded Labels, Laser Printer Compatible',\n    'GlobeWeis Clasp Envelope, Recycled',\n    'StarTech Card Printer, Wireless']},\n  {'tag': 'Steven_Ward_Africa',\n   'patterns': ['Steven Ward'],\n   'responses': ['Breville Microwave, Red',\n    'SanDisk Note Cards, Multicolor',\n    'SAFCO Executive Leather Armchair, Adjustable',\n    'Stanley Pencil Sharpener, Water Color',\n    'Enermax Memo Slips, Recycled']},\n  {'tag': 'Sam_Zeldin_Africa',\n   'patterns': ['Sam Zeldin'],\n   'responses': ['Stiletto Ruler, Easy Grip',\n    'Eaton Computer Printout Paper, 8.5 x 11',\n    'Hon Color Coded Labels, Laser Printer Compatible',\n    'Nokia Speaker Phone, Cordless',\n    'StarTech Card Printer, Wireless']},\n  {'tag': 'Tom_Ashbrook_Africa',\n   'patterns': ['Tom Ashbrook'],\n   'responses': ['Stiletto Ruler, Easy Grip',\n    'Eaton Computer Printout Paper, 8.5 x 11',\n    'Cardinal Index Tab, Durable',\n    'Ibico Binding Machine, Recycled',\n    'GlobeWeis Clasp Envelope, Recycled']},\n  {'tag': 'Ted_Butterfield_Africa',\n   'patterns': ['Ted Butterfield'],\n   'responses': ['Eaton Computer Printout Paper, 8.5 x 11',\n    'Stiletto Ruler, Easy Grip',\n    'Ibico Binder, Recycled',\n    'Stanley Pencil Sharpener, Water Color',\n    'Nokia Speaker Phone, Cordless']},\n  {'tag': 'Thomas_Boland_Africa',\n   'patterns': ['Thomas Boland'],\n   'responses': ['Elite Ruler, Serrated',\n    'Eldon Shelving, Blue',\n    'Hoover Microwave, White',\n    'Stanley Pencil Sharpener, Water Color',\n    'StarTech Card Printer, Wireless']},\n  {'tag': 'Thomas_Brumley_Africa',\n   'patterns': ['Thomas Brumley'],\n   'responses': ['StarTech Card Printer, Wireless',\n    'Binney & Smith Pens, Easy-Erase',\n    'Boston Markers, Easy-Erase',\n    'Nokia Speaker Phone, Cordless',\n    'Stanley Pencil Sharpener, Water Color']},\n  {'tag': 'Tim_Brockman_Africa',\n   'patterns': ['Tim Brockman'],\n   'responses': ['Eldon Lockers, Wire Frame',\n    'Wilson Jones Binder, Durable',\n    'Hewlett Ink, Laser',\n    'Harbour Creations Shipping Labels, Adjustable',\n    'Office Star Swivel Stool, Adjustable']},\n  {'tag': 'Toby_Braunhardt_Africa',\n   'patterns': ['Toby Braunhardt'],\n   'responses': ['Green Bar Message Books, Multicolor',\n    'Stanley Pencil Sharpener, Water Color',\n    'Office Star Swivel Stool, Adjustable',\n    'Boston Markers, Easy-Erase',\n    'Nokia Speaker Phone, Cordless']},\n  {'tag': 'Todd_Boyes_Africa',\n   'patterns': ['Todd Boyes'],\n   'responses': ['Eaton Computer Printout Paper, 8.5 x 11',\n    'Stiletto Ruler, Easy Grip',\n    'Ibico Binder, Recycled',\n    'Stanley Pencil Sharpener, Water Color',\n    'Nokia Speaker Phone, Cordless']},\n  {'tag': 'Tom_Boeckenhauer_Africa',\n   'patterns': ['Tom Boeckenhauer'],\n   'responses': ['Deflect-O Clock, Duo Pack',\n    'SanDisk Note Cards, Multicolor',\n    'Stanley Pencil Sharpener, Water Color',\n    'Boston Markers, Easy-Erase',\n    'Memorex Router, USB']},\n  {'tag': 'Tracy_Blumstein_Africa',\n   'patterns': ['Tracy Blumstein'],\n   'responses': ['Hoover Microwave, White',\n    'Elite Ruler, Serrated',\n    'Eldon Shelving, Blue',\n    'Binney & Smith Markers, Easy-Erase',\n    'Eldon File Cart, Industrial']},\n  {'tag': 'Troy_Blackwell_Africa',\n   'patterns': ['Troy Blackwell'],\n   'responses': ['Cameo Peel and Seal, Set of 50',\n    'Nokia Speaker Phone, Cordless',\n    'Boston Markers, Easy-Erase',\n    'Hoover Blender, Black',\n    'StarTech Card Printer, Wireless']},\n  {'tag': 'Trudy_Brown_Africa',\n   'patterns': ['Trudy Brown'],\n   'responses': ['Eaton Computer Printout Paper, 8.5 x 11',\n    'Stiletto Ruler, Easy Grip',\n    'Boston Markers, Easy-Erase',\n    'Nokia Speaker Phone, Cordless',\n    'Ibico Binding Machine, Recycled']},\n  {'tag': 'Tamara_Chand_Africa',\n   'patterns': ['Tamara Chand'],\n   'responses': ['Stiletto Ruler, Easy Grip',\n    'Eaton Computer Printout Paper, 8.5 x 11',\n    'Hon Color Coded Labels, Laser Printer Compatible',\n    'StarTech Card Printer, Wireless',\n    'Boston Markers, Easy-Erase']},\n  {'tag': 'Theresa_Coyne_Africa',\n   'patterns': ['Theresa Coyne'],\n   'responses': ['Nokia Speaker Phone, with Caller ID',\n    'Eaton Computer Printout Paper, 8.5 x 11',\n    'Stiletto Ruler, Easy Grip',\n    'Boston Markers, Easy-Erase',\n    'Hon Color Coded Labels, Laser Printer Compatible']},\n  {'tag': 'Toby_Carlisle_Africa',\n   'patterns': ['Toby Carlisle'],\n   'responses': ['Eaton Computer Printout Paper, 8.5 x 11',\n    'Stiletto Ruler, Easy Grip',\n    'Ibico Binder, Recycled',\n    'Stanley Pencil Sharpener, Water Color',\n    'Nokia Speaker Phone, Cordless']},\n  {'tag': 'Tony_Chapman_Africa',\n   'patterns': ['Tony Chapman'],\n   'responses': ['Eaton Computer Printout Paper, 8.5 x 11',\n    'Green Bar Message Books, Multicolor',\n    'Stiletto Ruler, Easy Grip',\n    'Stanley Pencil Sharpener, Water Color',\n    'GlobeWeis Clasp Envelope, Recycled']},\n  {'tag': 'Tracy_Collins_Africa',\n   'patterns': ['Tracy Collins'],\n   'responses': ['Eaton Message Books, Recycled',\n    'Stiletto Ruler, Easy Grip',\n    'Eaton Computer Printout Paper, 8.5 x 11',\n    'Binney & Smith Pens, Easy-Erase',\n    'Stanley Pencil Sharpener, Water Color']},\n  {'tag': 'Tamara_Dahlen_Africa',\n   'patterns': ['Tamara Dahlen'],\n   'responses': ['Fellowes File Cart, Wire Frame',\n    'Stanley Pencil Sharpener, Fluorescent',\n    'Okidata Calculator, White',\n    'Boston Markers, Easy-Erase',\n    'Office Star Swivel Stool, Adjustable']},\n  {'tag': 'Toby_Gnade_Africa',\n   'patterns': ['Toby Gnade'],\n   'responses': ['Eaton Computer Printout Paper, 8.5 x 11',\n    'Hewlett Fax Machine, High-Speed',\n    'Stiletto Ruler, Easy Grip',\n    'SanDisk Cards & Envelopes, Recycled',\n    'Boston Markers, Easy-Erase']},\n  {'tag': 'Trudy_Glocke_Africa',\n   'patterns': ['Trudy Glocke'],\n   'responses': ['Binney & Smith Markers, Water Color',\n    'Canon Wireless Fax, Color',\n    'Cardinal 3-Hole Punch, Clear',\n    'Epson Inkjet, Wireless',\n    'Ames Business Envelopes, Security-Tint']},\n  {'tag': 'Thea_Hendricks_Africa',\n   'patterns': ['Thea Hendricks'],\n   'responses': ['Acme Scissors, Steel',\n    'Fellowes File Cart, Wire Frame',\n    'Avery Round Labels, Alphabetical',\n    'Tenex Folders, Single Width',\n    'Fellowes Trays, Wire Frame']},\n  {'tag': 'Thea_Hudgings_Africa',\n   'patterns': ['Thea Hudgings'],\n   'responses': ['Nokia Speaker Phone, Cordless',\n    'Boston Markers, Easy-Erase',\n    'StarTech Card Printer, Wireless',\n    'Stanley Pencil Sharpener, Water Color',\n    'Smead Shelving, Single Width']},\n  {'tag': 'Tiffany_House_Africa',\n   'patterns': ['Tiffany House'],\n   'responses': ['Nokia Speaker Phone, with Caller ID',\n    'Kraft Manila Envelope, Security-Tint',\n    'StarTech Card Printer, Wireless',\n    'Apple Audio Dock, Cordless',\n    'Nokia Speaker Phone, Cordless']},\n  {'tag': 'Tracy_Hopkins_Africa',\n   'patterns': ['Tracy Hopkins'],\n   'responses': ['Stiletto Ruler, Easy Grip',\n    'Eaton Computer Printout Paper, 8.5 x 11',\n    'Nokia Speaker Phone, Cordless',\n    'Hon Color Coded Labels, Laser Printer Compatible',\n    'StarTech Card Printer, Wireless']},\n  {'tag': 'Tamara_Manning_Africa',\n   'patterns': ['Tamara Manning'],\n   'responses': ['Novimex Shipping Labels, Laser Printer Compatible',\n    'Sanford Sketch Pad, Blue',\n    'Rogers Lockers, Blue',\n    'GlobeWeis Manila Envelope, Security-Tint',\n    'Acme Box Cutter, Easy Grip']},\n  {'tag': 'Tony_Molinari_Africa',\n   'patterns': ['Tony Molinari'],\n   'responses': ['Binney & Smith Sketch Pad, Blue',\n    'Sanford Sketch Pad, Blue',\n    'Rogers Lockers, Blue',\n    'Hamilton Beach Stove, Silver',\n    'Boston Markers, Easy-Erase']},\n  {'tag': 'Tanja_Norvell_Africa',\n   'patterns': ['Tanja Norvell'],\n   'responses': ['Sanford Canvas, Easy-Erase',\n    'Harbour Creations Executive Leather Armchair, Adjustable',\n    'Wilson Jones Binder, Economy',\n    'Enermax Numeric Keypad, Bluetooth',\n    'Rogers Folders, Single Width']},\n  {'tag': 'Theone_Pippenger_Africa',\n   'patterns': ['Theone Pippenger'],\n   'responses': ['Acco Binder, Recycled',\n    'Stiletto Ruler, Easy Grip',\n    'Eaton Computer Printout Paper, 8.5 x 11',\n    'Stanley Pencil Sharpener, Water Color',\n    'GlobeWeis Clasp Envelope, Recycled']},\n  {'tag': 'Tom_Prescott_Africa',\n   'patterns': ['Tom Prescott'],\n   'responses': ['Eaton Computer Printout Paper, 8.5 x 11',\n    'Stiletto Ruler, Easy Grip',\n    'Boston Markers, Easy-Erase',\n    'Nokia Speaker Phone, Cordless',\n    'Novimex Legal Exhibit Labels, Laser Printer Compatible']},\n  {'tag': 'Tracy_Poddar_Africa',\n   'patterns': ['Tracy Poddar'],\n   'responses': ['Acme Scissors, Serrated',\n    'Avery File Folder Labels, 5000 Label Set',\n    'Sanford Sketch Pad, Fluorescent',\n    'Fellowes Folders, Single Width',\n    'StarTech Card Printer, Wireless']},\n  {'tag': 'Toby_Ritter_Africa',\n   'patterns': ['Toby Ritter'],\n   'responses': ['Eaton Computer Printout Paper, 8.5 x 11',\n    'Stiletto Ruler, Easy Grip',\n    'Ibico Binder, Recycled',\n    'Nokia Speaker Phone, Cordless',\n    'Novimex Legal Exhibit Labels, Laser Printer Compatible']},\n  {'tag': 'Thais_Sissman_Africa',\n   'patterns': ['Thais Sissman'],\n   'responses': ['Eaton Computer Printout Paper, 8.5 x 11',\n    'Stiletto Ruler, Easy Grip',\n    'Ibico Binder, Recycled',\n    'Stanley Pencil Sharpener, Water Color',\n    'Nokia Speaker Phone, Cordless']},\n  {'tag': 'Theresa_Swint_Africa',\n   'patterns': ['Theresa Swint'],\n   'responses': ['Rogers Trays, Single Width',\n    'Eaton Computer Printout Paper, 8.5 x 11',\n    'Stiletto Ruler, Easy Grip',\n    'Boston Markers, Easy-Erase',\n    'Fiskars Letter Opener, Easy Grip']},\n  {'tag': 'Thomas_Seio_Africa',\n   'patterns': ['Thomas Seio'],\n   'responses': ['SanDisk Note Cards, Multicolor',\n    'Bush Floating Shelf Set, Pine',\n    'Stanley Pencil Sharpener, Water Color',\n    'Enermax Memo Slips, Recycled',\n    'StarTech Card Printer, Wireless']},\n  {'tag': 'Toby_Swindell_Africa',\n   'patterns': ['Toby Swindell'],\n   'responses': ['Fellowes Shelving, Wire Frame',\n    'Belkin Keyboard, Erganomic',\n    'Okidata Calculator, White',\n    'Harbour Creations Round Labels, 5000 Label Set',\n    'Fellowes Folders, Blue']},\n  {'tag': 'Todd_Sumrall_Africa',\n   'patterns': ['Todd Sumrall'],\n   'responses': ['Kleencut Trimmer, Easy Grip',\n    'StarTech Card Printer, Wireless',\n    'Hon Steel Folding Chair, Set of Two',\n    'Tenex Shelving, Wire Frame',\n    'Tenex File Cart, Industrial']},\n  {'tag': 'Tom_Stivers_Africa',\n   'patterns': ['Tom Stivers'],\n   'responses': ['Tenex Stacking Tray, Erganomic',\n    'Stanley Pencil Sharpener, Water Color',\n    'Boston Markers, Easy-Erase',\n    'StarTech Card Printer, Wireless',\n    'Nokia Speaker Phone, Cordless']},\n  {'tag': 'Tony_Sayre_Africa',\n   'patterns': ['Tony Sayre'],\n   'responses': ['Eaton Computer Printout Paper, 8.5 x 11',\n    'Stiletto Ruler, Easy Grip',\n    'Ibico Binder, Recycled',\n    'Stanley Pencil Sharpener, Water Color',\n    'Nokia Speaker Phone, Cordless']},\n  {'tag': 'Troy_Staebel_Africa',\n   'patterns': ['Troy Staebel'],\n   'responses': ['HP Fax Machine, Laser',\n    'Stanley Pencil Sharpener, Water Color',\n    'Rubbermaid Door Stop, Durable',\n    'Wilson Jones Binder, Durable',\n    'Boston Markers, Easy-Erase']},\n  {'tag': 'Trudy_Schmidt_Africa',\n   'patterns': ['Trudy Schmidt'],\n   'responses': ['Logitech Flash Drive, Programmable',\n    'Ikea Classic Bookcase, Traditional',\n    'Tenex Door Stop, Durable',\n    'Stockwell Paper Clips, Bulk Pack',\n    'StarTech Card Printer, Wireless']},\n  {'tag': 'Ted_Trevino_Africa',\n   'patterns': ['Ted Trevino'],\n   'responses': ['Eaton Computer Printout Paper, 8.5 x 11',\n    'Stiletto Ruler, Easy Grip',\n    'Ibico Binder, Recycled',\n    'Stanley Pencil Sharpener, Water Color',\n    'Nokia Speaker Phone, Cordless']},\n  {'tag': 'Thomas_Thornton_Africa',\n   'patterns': ['Thomas Thornton'],\n   'responses': ['Wilson Jones Binder, Economy',\n    'Eaton Computer Printout Paper, 8.5 x 11',\n    'Stiletto Ruler, Easy Grip',\n    'Memorex Flash Drive, Erganomic',\n    'Ibico Binding Machine, Recycled']},\n  {'tag': 'Tim_Taslimi_Africa',\n   'patterns': ['Tim Taslimi'],\n   'responses': ['Eaton Message Books, Recycled',\n    'Stiletto Ruler, Easy Grip',\n    'Harbour Creations Chairmat, Black',\n    'Eaton Computer Printout Paper, 8.5 x 11',\n    'Binney & Smith Pens, Easy-Erase']},\n  {'tag': 'Tonja_Turnell_Africa',\n   'patterns': ['Tonja Turnell'],\n   'responses': ['Elite Ruler, Serrated',\n    'Eldon Shelving, Blue',\n    'Eaton Computer Printout Paper, 8.5 x 11',\n    'Stiletto Ruler, Easy Grip',\n    'Hoover Microwave, White']},\n  {'tag': 'Tamara_Willingham_Africa',\n   'patterns': ['Tamara Willingham'],\n   'responses': ['Panasonic Receipt Printer, Wireless',\n    'BIC Pens, Water Color',\n    'Acco 3-Hole Punch, Recycled',\n    'Enermax Computer Printout Paper, 8.5 x 11',\n    'Harbour Creations Chairmat, Adjustable']},\n  {'tag': 'Tom_Zandusky_Africa',\n   'patterns': ['Tom Zandusky'],\n   'responses': ['Panasonic Receipt Printer, Wireless',\n    'Stiletto Ruler, Easy Grip',\n    'Eaton Computer Printout Paper, 8.5 x 11',\n    'Harbour Creations Chairmat, Adjustable',\n    'Office Star Swivel Stool, Set of Two']},\n  {'tag': 'Tracy_Zic_Africa',\n   'patterns': ['Tracy Zic'],\n   'responses': ['Stanley Pencil Sharpener, Water Color',\n    'Acco Index Tab, Economy',\n    'Nokia Speaker Phone, Cordless',\n    'StarTech Card Printer, Wireless',\n    'Sharp Wireless Fax, Color']},\n  {'tag': 'Victoria_Brennan_Africa',\n   'patterns': ['Victoria Brennan'],\n   'responses': ['Eldon Shelving, Blue',\n    'Hoover Microwave, White',\n    'Elite Ruler, Serrated',\n    'Memorex Router, Erganomic',\n    'Binney & Smith Markers, Easy-Erase']},\n  {'tag': 'Valerie_Dominguez_Africa',\n   'patterns': ['Valerie Dominguez'],\n   'responses': ['Deflect-O Stacking Tray, Durable',\n    'Elite Ruler, Serrated',\n    'Canon Fax Machine, High-Speed',\n    'Ikea Corner Shelving, Pine',\n    'Kleencut Letter Opener, Steel']},\n  {'tag': 'Vicky_Freymann_Africa',\n   'patterns': ['Vicky Freymann'],\n   'responses': ['Eaton Computer Printout Paper, 8.5 x 11',\n    'Stiletto Ruler, Easy Grip',\n    'Stanley Pencil Sharpener, Water Color',\n    'Hamilton Beach Stove, White',\n    'Hon Color Coded Labels, Laser Printer Compatible']},\n  {'tag': 'Vivek_Gonzalez_Africa',\n   'patterns': ['Vivek Gonzalez'],\n   'responses': ['Wilson Jones Index Tab, Clear',\n    'Cardinal Hole Reinforcements, Economy',\n    'Deflect-O Stacking Tray, Durable',\n    'Smead Shipping Labels, Adjustable',\n    'Canon Fax Machine, High-Speed']},\n  {'tag': 'Vivek_Grady_Africa',\n   'patterns': ['Vivek Grady'],\n   'responses': ['Binney & Smith Sketch Pad, Blue',\n    'Rogers Lockers, Blue',\n    'Stockwell Paper Clips, Assorted Sizes',\n    'Novimex Shipping Labels, Laser Printer Compatible',\n    'Memorex Mouse, Erganomic']},\n  {'tag': 'Valerie_Mitchum_Africa',\n   'patterns': ['Valerie Mitchum'],\n   'responses': ['Wilson Jones Index Tab, Economy',\n    'Tenex Trays, Single Width',\n    'Nokia Speaker Phone, Cordless',\n    'Boston Markers, Easy-Erase',\n    'Sanford Highlighters, Blue']},\n  {'tag': 'Vivian_Mathis_Africa',\n   'patterns': ['Vivian Mathis'],\n   'responses': ['Nokia Speaker Phone, Cordless',\n    'StarTech Card Printer, Wireless',\n    'Stanley Pencil Sharpener, Water Color',\n    'Boston Markers, Easy-Erase',\n    'Hon Chairmat, Adjustable']},\n  {'tag': 'Victor_Preis_Africa',\n   'patterns': ['Victor Preis'],\n   'responses': ['Wilson Jones Binder, Durable',\n    'HP Fax Machine, Laser',\n    'StarTech Card Printer, Wireless',\n    'Boston Markers, Easy-Erase',\n    'Stanley Pencil Sharpener, Water Color']},\n  {'tag': 'Victoria_Pisteka_Africa',\n   'patterns': ['Victoria Pisteka'],\n   'responses': ['Nokia Speaker Phone, with Caller ID',\n    'StarTech Card Printer, Wireless',\n    'Apple Audio Dock, Cordless',\n    'Kraft Manila Envelope, Security-Tint',\n    'Eldon Shelving, Single Width']},\n  {'tag': 'Vivek_Sundaresam_Africa',\n   'patterns': ['Vivek Sundaresam'],\n   'responses': ['SanDisk Flash Drive, Bluetooth',\n    'Memorex Router, Erganomic',\n    'Wilson Jones Binding Machine, Clear',\n    'Bush Corner Shelving, Metal',\n    'KitchenAid Microwave, White']},\n  {'tag': 'Valerie_Takahito_Africa',\n   'patterns': ['Valerie Takahito'],\n   'responses': ['Acme Scissors, Serrated',\n    'Avery File Folder Labels, 5000 Label Set',\n    'Sanford Sketch Pad, Fluorescent',\n    'Eaton Computer Printout Paper, 8.5 x 11',\n    'Stiletto Ruler, Easy Grip']},\n  {'tag': 'Victoria_Wilson_Africa',\n   'patterns': ['Victoria Wilson'],\n   'responses': ['Apple Headset, VoIP',\n    'Stanley Pencil Sharpener, Water Color',\n    'Konica Inkjet, Durable',\n    'Tenex Folders, Single Width',\n    'Boston Markers, Easy-Erase']},\n  {'tag': 'William_Brown_Africa',\n   'patterns': ['William Brown'],\n   'responses': ['Eaton Computer Printout Paper, 8.5 x 11',\n    'Stiletto Ruler, Easy Grip',\n    'Ibico Binder, Recycled',\n    'Stanley Pencil Sharpener, Water Color',\n    'Nokia Speaker Phone, Cordless']},\n  {'tag': 'Xylona_Preis_Africa',\n   'patterns': ['Xylona Preis'],\n   'responses': ['Stanley Pencil Sharpener, Water Color',\n    'Acco Index Tab, Economy',\n    'Nokia Speaker Phone, Cordless',\n    'StarTech Card Printer, Wireless',\n    'Sharp Wireless Fax, Color']},\n  {'tag': 'Yoseph_Carroll_Africa',\n   'patterns': ['Yoseph Carroll'],\n   'responses': ['StarTech Calculator, Durable',\n    'Harbour Creations Legal Exhibit Labels, Laser Printer Compatible',\n    'Rubbermaid Stacking Tray, Erganomic',\n    'Stockwell Push Pins, Bulk Pack',\n    'Fellowes Shelving, Single Width']},\n  {'tag': 'Yana_Sorensen_Africa',\n   'patterns': ['Yana Sorensen'],\n   'responses': ['Boston Pencil Sharpener, Water Color',\n    'Sharp Copy Machine, Color',\n    'Wilson Jones 3-Hole Punch, Durable',\n    'StarTech Card Printer, Wireless',\n    'Sanford Highlighters, Blue']},\n  {'tag': 'Zuschuss_Carroll_Africa',\n   'patterns': ['Zuschuss Carroll'],\n   'responses': ['Eaton Computer Printout Paper, 8.5 x 11',\n    'Stiletto Ruler, Easy Grip',\n    'GlobeWeis Clasp Envelope, Recycled',\n    'Ibico Binding Machine, Recycled',\n    'Stanley Pencil Sharpener, Water Color']},\n  {'tag': 'Zuschuss_Donatelli_Africa',\n   'patterns': ['Zuschuss Donatelli'],\n   'responses': ['Hoover Microwave, White',\n    'Eldon Shelving, Blue',\n    'Elite Ruler, Serrated',\n    'OIC Paper Clips, Bulk Pack',\n    'StarTech Card Printer, Wireless']}]}"
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "intents"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.models import load_model\n",
    "model = load_model('chatbot_model.h5')\n",
    "import json\n",
    "import random\n",
    "words = pickle.load(open('words.pkl','rb'))\n",
    "classes = pickle.load(open('classes.pkl','rb'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To predict the class, we will need to provide input in the same way as we did while training. So we will create some functions that will perform text preprocessing and then predict the class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "def clean_up_sentence(sentence):\n",
    "    # tokenize the pattern - split words into array\n",
    "    sentence_words = nltk.word_tokenize(sentence)\n",
    "    # stem each word - create short form for word\n",
    "    sentence_words = [lemmatizer.lemmatize(word.lower()) for word in sentence_words]\n",
    "    return sentence_words\n",
    "# return bag of words array: 0 or 1 for each word in the bag that exists in the sentence\n",
    "def bow(sentence, words, show_details=True):\n",
    "    # tokenize the pattern\n",
    "    sentence_words = clean_up_sentence(sentence)\n",
    "    # bag of words - matrix of N words, vocabulary matrix\n",
    "    bag = [0]*len(words) \n",
    "    for s in sentence_words:\n",
    "        for i,w in enumerate(words):\n",
    "            if w == s: \n",
    "                # assign 1 if current word is in the vocabulary position\n",
    "                bag[i] = 1\n",
    "                if show_details:\n",
    "                    print (\"found in bag: %s\" % w)\n",
    "    return(np.array(bag))\n",
    "def predict_class(sentence, model):\n",
    "    # filter out predictions below a threshold\n",
    "    p = bow(sentence, words,show_details=False)\n",
    "    res = model.predict(np.array([p]))[0]\n",
    "    ERROR_THRESHOLD = 0.25\n",
    "    results = [[i,r] for i,r in enumerate(res) if r>ERROR_THRESHOLD]\n",
    "    # sort by strength of probability\n",
    "    results.sort(key=lambda x: x[1], reverse=True)\n",
    "    return_list = []\n",
    "    for r in results:\n",
    "        return_list.append({\"intent\": classes[r[0]], \"probability\": str(r[1])})\n",
    "    return return_list"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After predicting the class, we will get a random response from the list of intents."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "def getResponse(ints, intents_json):\n",
    "    tag = ints[0]['intent']\n",
    "    list_of_intents = intents_json['intents']\n",
    "    for i in list_of_intents:\n",
    "        if(i['tag']== tag):\n",
    "            result = random.choice(i['responses'])\n",
    "            break\n",
    "    return result\n",
    "def chatbot_response(text):\n",
    "    ints = predict_class(text, model)\n",
    "    res = getResponse(ints, intents)\n",
    "    return res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": "'Bye, have fun at Ironbeeeeeeeeeeers'"
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Ruben Dartt\n",
    "chatbot_response('bye')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": "Hello, thanks for asking\n"
    },
    {
     "ename": "IndexError",
     "evalue": "list index out of range",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-40-5d3a17be2e7f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Hello'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mchatbot_response\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-31-67b547fb1230>\u001b[0m in \u001b[0;36mchatbot_response\u001b[0;34m(text)\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mchatbot_response\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0mints\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpredict_class\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m     \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetResponse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mints\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mintents\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-31-67b547fb1230>\u001b[0m in \u001b[0;36mgetResponse\u001b[0;34m(ints, intents_json)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mgetResponse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mints\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mintents_json\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m     \u001b[0mtag\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mints\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'intent'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m     \u001b[0mlist_of_intents\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mintents_json\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'intents'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlist_of_intents\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m         \u001b[0;32mif\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'tag'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m==\u001b[0m \u001b[0mtag\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mIndexError\u001b[0m: list index out of range"
     ]
    }
   ],
   "source": [
    "for i in range(10):\n",
    "    x=input('Hello')\n",
    "    print(chatbot_response(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### not able to create the GUI"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter\n",
    "from tkinter import *\n",
    "def send():\n",
    "    msg = EntryBox.get(\"1.0\",'end-1c').strip()\n",
    "    EntryBox.delete(\"0.0\",END)\n",
    "    if msg != '':\n",
    "        ChatLog.config(state=NORMAL)\n",
    "        ChatLog.insert(END, \"You: \" + msg + '\\n\\n')\n",
    "        ChatLog.config(foreground=\"#442265\", font=(\"Verdana\", 12 ))\n",
    "        res = chatbot_response(msg)\n",
    "        ChatLog.insert(END, \"Bot: \" + res + '\\n\\n')\n",
    "        ChatLog.config(state=DISABLED)\n",
    "        ChatLog.yview(END)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "base = Tk()\n",
    "base.title(\"Hello\")\n",
    "base.geometry(\"400x500\")\n",
    "base.resizable(width=FALSE, height=FALSE)\n",
    "#Create Chat window\n",
    "ChatLog = Text(base, bd=0, bg=\"white\", height=\"8\", width=\"50\", font=\"Arial\",)\n",
    "ChatLog.config(state=DISABLED)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Bind scrollbar to Chat window\n",
    "scrollbar = Scrollbar(base, command=ChatLog.yview, cursor=\"heart\")\n",
    "ChatLog['yscrollcommand'] = scrollbar.set\n",
    "#Create Button to send message\n",
    "SendButton = Button(base, font=(\"Verdana\",12,'bold'), text=\"Send\", width=\"12\", height=5, bd=0, bg=\"#32de97\", activebackground=\"#3c9d9b\",fg='#ffffff', command= send )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Create the box to enter message\n",
    "EntryBox = Text(base, bd=0, bg=\"white\",width=\"29\", height=\"5\", font=\"Arial\")\n",
    "#EntryBox.bind(\"<Return>\", send)\n",
    "#Place all components on the screen\n",
    "\n",
    "scrollbar.place(x=376,y=6, height=386)\n",
    "ChatLog.place(x=6,y=6, height=386, width=370)\n",
    "EntryBox.place(x=128, y=401, height=90, width=265)\n",
    "SendButton.place(x=6, y=401, height=90)\n",
    "\n",
    "base.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3-final"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}